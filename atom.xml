<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GoDm@&#39;s Blog</title>
  
  <subtitle>记录自己所爱。</subtitle>
  <link href="https://blog.godmao.top/atom.xml" rel="self"/>
  
  <link href="https://blog.godmao.top/"/>
  <updated>2025-06-11T09:18:28.068Z</updated>
  <id>https://blog.godmao.top/</id>
  
  <author>
    <name>GoDm@</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu文件系统结构</title>
    <link href="https://blog.godmao.top/posts/7417/"/>
    <id>https://blog.godmao.top/posts/7417/</id>
    <published>2025-06-11T09:02:41.000Z</published>
    <updated>2025-06-11T09:18:28.068Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章为博主原创文章。遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><blockquote><p>万物皆文件</p></blockquote><p><strong>仅作学习记录。</strong></p><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td><code>/</code></td><td>根目录，是所有文件和目录的起点。</td></tr><tr><td><code>/bin</code><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></td><td>存放系统启动和运行所需的基本命令（如 <code>ls</code>, <code>cp</code>, <code>mv</code>）。</td></tr><tr><td><code>/boot</code></td><td>启动相关文件，如内核 (<code>vmlinuz</code>)、引导加载器配置等。</td></tr><tr><td><code>/dev</code></td><td>包含所有设备（驱动）文件（如硬盘、终端、USB 设备）。</td></tr><tr><td><code>/etc</code></td><td>系统配置文件目录（如网络、用户、服务配置）。</td></tr><tr><td><code>/home</code></td><td>每个普通用户的主目录（如 <code>/home/alice</code>）。</td></tr><tr><td><code>/lib</code></td><td>存放系统程序所需的共享库文件。</td></tr><tr><td><code>/lib64</code></td><td>存放64位系统的共享库（与 <code>/lib</code> 类似）。</td></tr><tr><td><code>/media</code></td><td>可移动设备挂载点（如U盘、CD-ROM）。</td></tr><tr><td><code>/mnt</code></td><td>临时挂载文件系统的目录，供管理员使用。</td></tr><tr><td><code>/opt</code></td><td>为第三方软件提供安装位置。</td></tr><tr><td><code>/proc</code></td><td>虚拟文件系统，内核和进程信息以文件形式展现（如 <code>/proc/cpuinfo</code>）。存放系统运行的信息？</td></tr><tr><td><code>/root</code></td><td><code>root</code> 用户的主目录（注意：不是 <code>/</code>）。</td></tr><tr><td><code>/run</code></td><td>存放运行时数据，如系统启动后生成的PID文件或Socket文件。</td></tr><tr><td><code>/sbin</code></td><td>存放系统管理类命令，仅供 <code>root</code> 用户使用（如 <code>reboot</code>, <code>fsck</code>）。</td></tr><tr><td><code>/srv</code></td><td>存放提供服务的数据（如网站、FTP 服务器数据）。</td></tr><tr><td><code>/sys</code></td><td>虚拟文件系统，表示内核设备结构，供 <code>udev</code> 和其他工具使用。</td></tr><tr><td><code>/tmp</code></td><td>存放临时文件（系统重启后清空）。</td></tr><tr><td><code>/usr</code></td><td>多数用户空间程序和库的安装目录。</td></tr><tr><td><code>/usr/bin</code></td><td>非必要基本命令（大部分用户程序）的位置。</td></tr><tr><td><code>/usr/sbin</code></td><td>系统管理命令的位置，供管理员使用。</td></tr><tr><td><code>/usr/lib</code></td><td><code>/usr/bin</code> 和 <code>/usr/sbin</code> 程序所用库文件。</td></tr><tr><td><code>/var</code></td><td>可变数据文件（如日志、缓存、邮件、数据库文件等）。</td></tr></tbody></table><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Faker VS Bin 你蹲我的意思吗 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
      
      
    <summary type="html">&lt;details&gt;
&lt;summary&gt;版权信息&lt;/summary&gt;
&lt;p&gt;:::warning&lt;/p&gt;
&lt;p&gt;本文章为博主原创文章。遵循 &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans&quot;&gt;C</summary>
      
    
    
    
    <category term="Linux" scheme="https://blog.godmao.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.godmao.top/Tags/Linux/"/>
    
    <category term="文件系统" scheme="https://blog.godmao.top/Tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用的shell命令总结</title>
    <link href="https://blog.godmao.top/posts/37616/"/>
    <id>https://blog.godmao.top/posts/37616/</id>
    <published>2025-06-11T07:35:35.000Z</published>
    <updated>2025-06-11T09:14:56.585Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章为博主原创文章。遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><p><strong>仅作学习记录。</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>使用格式</th></tr></thead><tbody><tr><td><code>ls</code></td><td>列出目录内容</td><td><code>ls [选项] [目录]</code></td></tr><tr><td><code>cd</code></td><td>改变当前目录</td><td><code>cd [目录]</code></td></tr><tr><td><code>pwd</code></td><td>显示当前工作目录</td><td><code>pwd</code></td></tr><tr><td><code>cp</code></td><td>复制文件或目录</td><td><code>cp [选项] 源文件 目标文件</code></td></tr><tr><td><code>mv</code></td><td>移动文件或目录，重命名文件</td><td><code>mv [选项] 源文件 目标文件</code></td></tr><tr><td><code>rm</code></td><td>删除文件或目录</td><td><code>rm [选项] 文件</code></td></tr><tr><td><code>touch</code></td><td>创建空文件</td><td><code>touch 文件名</code></td></tr><tr><td><code>mkdir</code></td><td>创建目录</td><td><code>mkdir [选项] 目录名</code></td></tr><tr><td><code>rmdir</code></td><td>删除空目录</td><td><code>rmdir 目录名</code></td></tr><tr><td><code>chmod</code></td><td>更改文件或目录权限</td><td><code>chmod [选项] 权限 文件</code></td></tr><tr><td><code>chown</code></td><td>更改文件或目录的所有者</td><td><code>chown 用户:组 文件</code></td></tr><tr><td><code>chgrp</code></td><td>更改文件或目录的所属组</td><td><code>chgrp 组 文件</code></td></tr><tr><td><code>cat</code></td><td>查看文件内容</td><td><code>cat 文件名</code></td></tr><tr><td><code>more</code></td><td>分页显示文件内容</td><td><code>more 文件名</code></td></tr><tr><td><code>less</code></td><td>分页显示文件内容（支持上下翻页）</td><td><code>less 文件名</code></td></tr><tr><td><code>head</code></td><td>查看文件开头部分</td><td><code>head [选项] 文件</code></td></tr><tr><td><code>tail</code></td><td>查看文件尾部部分</td><td><code>tail [选项] 文件</code></td></tr><tr><td><code>find</code></td><td>查找文件或目录</td><td><code>find [路径] [选项] [表达式]</code></td></tr><tr><td><code>grep</code></td><td>文本搜索</td><td><code>grep [选项] &quot;模式&quot; 文件</code></td></tr><tr><td><code>tar</code></td><td>压缩或解压文件</td><td><code>tar [选项] [文件]</code></td></tr><tr><td><code>gzip</code></td><td>压缩文件</td><td><code>gzip 文件名</code></td></tr><tr><td><code>gunzip</code></td><td>解压.gz文件</td><td><code>gunzip 文件名.gz</code></td></tr><tr><td><code>zip</code></td><td>压缩文件</td><td><code>zip [选项] 压缩包 文件</code></td></tr><tr><td><code>unzip</code></td><td>解压.zip文件</td><td><code>unzip 压缩包</code></td></tr><tr><td><code>df</code></td><td>查看文件系统磁盘空间使用情况</td><td><code>df [选项]</code></td></tr><tr><td><code>du</code></td><td>查看目录或文件的磁盘使用情况</td><td><code>du [选项] 文件/目录</code></td></tr><tr><td><code>top</code></td><td>查看系统进程状态</td><td><code>top</code></td></tr><tr><td><code>ps</code></td><td>查看进程状态</td><td><code>ps [选项]</code></td></tr><tr><td><code>kill</code></td><td>终止进程</td><td><code>kill [选项] 进程号</code></td></tr><tr><td><code>pstree</code></td><td>以树形结构显示进程</td><td><code>pstree</code></td></tr><tr><td><code>free</code></td><td>查看内存使用情况</td><td><code>free [选项]</code></td></tr><tr><td><code>uname</code></td><td>查看系统信息</td><td><code>uname [选项]</code></td></tr><tr><td><code>ifconfig</code></td><td>配置网络接口</td><td><code>ifconfig [网络接口]</code></td></tr><tr><td><code>ip</code></td><td>查看或配置网络</td><td><code>ip [选项]</code></td></tr><tr><td><code>ping</code></td><td>测试网络连接</td><td><code>ping [选项] 地址</code></td></tr><tr><td><code>scp</code></td><td>安全复制文件</td><td><code>scp 源文件 用户@主机:目标</code></td></tr><tr><td><code>rsync</code></td><td>同步文件和目录</td><td><code>rsync [选项] 源 目标</code></td></tr><tr><td><code>wget</code></td><td>从网络下载文件</td><td><code>wget [选项] URL</code></td></tr><tr><td><code>curl</code></td><td>与网络交互（下载、上传文件等）</td><td><code>curl [选项] URL</code></td></tr><tr><td><code>alias</code></td><td>创建命令别名</td><td><code>alias 别名='命令'</code></td></tr><tr><td><code>history</code></td><td>查看命令历史</td><td><code>history</code></td></tr><tr><td><code>man</code></td><td>查看命令手册</td><td><code>man 命令名</code></td></tr><tr><td><code>echo</code></td><td>输出字符串到终端</td><td><code>echo &quot;文本&quot;</code></td></tr><tr><td><code>tee</code></td><td>从标准输入读取，并将其内容输出到文件</td><td><code>命令 | tee 文件</code></td></tr><tr><td><code>cut</code></td><td>按列切割文件内容</td><td><code>cut -d 分隔符 -f 列 文件</code></td></tr><tr><td><code>awk</code></td><td>强大的文本处理工具</td><td><code>awk '条件 &#123;动作&#125;' 文件</code></td></tr><tr><td><code>sed</code></td><td>流编辑器，处理文本数据</td><td><code>sed 's/模式/替换文本/' 文件</code></td></tr><tr><td><code>tr</code></td><td>转换字符</td><td><code>tr '旧字符' '新字符' &lt; 文件</code></td></tr><tr><td><code>wc</code></td><td>统计文件字数、行数、字节数等</td><td><code>wc [选项] 文件</code></td></tr><tr><td><code>whoami</code></td><td>查看当前用户</td><td><code>whoami</code></td></tr><tr><td><code>sudo</code></td><td>以超级用户身份执行命令</td><td><code>sudo 命令</code></td></tr><tr><td><code>exit</code></td><td>退出终端或当前Shell会话</td><td><code>exit</code></td></tr><tr><td><code>file</code></td><td>文件类型查看命令</td><td><code>file 文件路径</code></td></tr></tbody></table><h2 id="ls"><a class="markdownIt-Anchor" href="#ls"></a> ls</h2><p>-a 列出全部<br />-l 以列展示</p><h2 id="ranger"><a class="markdownIt-Anchor" href="#ranger"></a> ranger</h2><p>一个终端文件管理器（Vim风格）</p><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>向上/向下</td><td>方向键</td></tr><tr><td>进入目录或打开文件</td><td><code>l / Enter</code></td></tr><tr><td>返回上一级目录</td><td>方向键</td></tr><tr><td>创建新文件</td><td><code>:touch filename</code></td></tr><tr><td>创建新目录</td><td><code>:mkdir dirname</code></td></tr><tr><td>删除文件/目录</td><td><code>D</code> 然后确认</td></tr><tr><td>重命名</td><td><code>cw</code></td></tr><tr><td>复制</td><td><code>yy</code>（复制）+ <code>pp</code>（粘贴）</td></tr><tr><td>剪切</td><td><code>dd</code>（剪切）+ <code>pp</code>（粘贴）</td></tr><tr><td>预览文件内容</td><td>自动或按 <code>i</code></td></tr><tr><td>搜索文件名</td><td><code>/关键词</code></td></tr><tr><td>退出</td><td><code>q</code> 或 <code>:q</code></td></tr></tbody></table><h2 id="grep"><a class="markdownIt-Anchor" href="#grep"></a> grep</h2><p>-r  递归子目录<br />-l  列出文件内容符合指定的样式的文件名称。<br />-i  不区分大小写<br />-n 字符串在哪一行</p><h2 id="du"><a class="markdownIt-Anchor" href="#du"></a> du</h2><p>-s 只显示指定目录总大小<br />-h 以单位k、m、g显示</p>]]></content>
    
    
      
      
    <summary type="html">&lt;details&gt;
&lt;summary&gt;版权信息&lt;/summary&gt;
&lt;p&gt;:::warning&lt;/p&gt;
&lt;p&gt;本文章为博主原创文章。遵循 &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans&quot;&gt;C</summary>
      
    
    
    
    <category term="Linux" scheme="https://blog.godmao.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.godmao.top/Tags/Linux/"/>
    
    <category term="shell" scheme="https://blog.godmao.top/Tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的在win上运行Linux</title>
    <link href="https://blog.godmao.top/posts/26155/"/>
    <id>https://blog.godmao.top/posts/26155/</id>
    <published>2025-06-07T15:16:17.000Z</published>
    <updated>2025-06-11T04:41:33.467Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章为博主原创文章。遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><p>在 Windows 和 Linux 之间切换开发环境是一件让人头疼的事。幸运的是，WSL（Windows Subsystem for Linux）为我们提供了一种优雅的解决方案：<strong>在 Windows 上原生运行 Linux</strong>，无需虚拟机或双系统。本文将带你优雅地入门 WSL，从安装到使用，让你轻松拥有双系统的快乐而不牺牲效率。</p><h2 id="一-wsl-是什么"><a class="markdownIt-Anchor" href="#一-wsl-是什么"></a> 一、WSL 是什么？</h2><p>WSL（Windows Subsystem for Linux）是微软提供的一种兼容层，使你可以直接在 Windows 上运行 Linux 用户空间环境。当前主流版本是 <strong>WSL 2</strong>，它使用轻量虚拟化技术，提供完整的 Linux 内核和更好的性能。那么它有什么好处呢？</p><ul><li>Linux 、Windows文件共享。你可以在Windows的文件资源管理器上处理Linux子系统的文件</li><li>命令混用，在Windows里可以运行Liunx命令，在Linux里可以运行Windows程序</li><li>显卡直通，在AI训练方面非常方便<br />等等…</li></ul><h2 id="二-准备工作"><a class="markdownIt-Anchor" href="#二-准备工作"></a> 二、准备工作</h2><p>:::success</p><ul><li>Windows 10（版本 2004 及以上，推荐 21H2 或更高）</li><li>或 Windows 11（原生支持 WSL 2）<br />:::<br />本文以win11为例。</li></ul><h3 id="开启必要功能"><a class="markdownIt-Anchor" href="#开启必要功能"></a> 开启必要功能</h3><p>在搜索栏搜索 <code>启动或关闭window功能</code><br /><img src="Snipaste_2025-06-07_23-29-33%201.png" alt="" /><br />开启如下两项：</p><ul><li>适用于Linux的Windows子系统</li><li>虚拟机平台<br /><img src="Snipaste_2025-06-07_23-32-13.png" alt="" /><br />然后<strong>重启以使更改生效</strong>。<br />如果是win11的话重启后可以看到文件资源管理器中有个Linux<br /><img src="Snipaste_2025-06-07_23-36-31.png" alt="" /></li></ul><h2 id="安装linux子系统"><a class="markdownIt-Anchor" href="#安装linux子系统"></a> 安装Linux子系统</h2><p>:::warning<br />win11原生支持WSL2，如果没有安装WSL，可以点击这个链接安装<br /><a href="https://apps.microsoft.com/detail/9p9tqf7mrm4r?ocid=pdpshare&amp;hl=en-us&amp;gl=US">Windows Subsystem for Linux - Microsoft Apps</a><br />:::</p><p>这里提供两种方法安装WSL2：</p><h3 id="直接安装发行版"><a class="markdownIt-Anchor" href="#直接安装发行版"></a> 直接安装发行版</h3><p>打开下面的链接：<br /><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install-manual#step-1---enable-the-windows-subsystem-for-linux">旧版 WSL 的手动安装步骤 | Microsoft Learn</a><br />直接下载想要的系统的发行版：<br /><img src="Snipaste_2025-06-08_00-08-42.png" alt="" /></p><p>下载下来后将文件后缀改为<code>.zip</code>,解压缩<br /><img src="Snipaste_2025-06-08_00-11-46.png" alt="" /></p><p>解压后，选择x64版本，同样的方法，继续解压<br /><img src="Snipaste_2025-06-08_00-14-29.png" alt="" /></p><p>解压后，复制如下两个文件到你想要安装的指定目录<br /><img src="Snipaste_2025-06-08_00-14-53.png" alt="" /></p><p>例如我的是<code>E:\Linux\Ubuntu-24.04LTS</code></p><p>在目录下双击运行exe文件，自此安装完成。<br /><img src="Snipaste_2025-06-08_00-18-01.png" alt="" /></p><h3 id="命令行安装不推荐"><a class="markdownIt-Anchor" href="#命令行安装不推荐"></a> 命令行安装（不推荐）</h3><p>不推荐原因如下：</p><ul><li>此方法下安装的Linux子系统默认安装在c盘，无法更改安装路径，想要迁移比较麻烦。</li><li>由于服务器原因，下载很慢，需要一些上网技巧才能流畅下载。</li></ul><p>打开cmd命令提示符窗口，输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --update</span><br><span class="line">wsl --install</span><br></pre></td></tr></table></figure><p>等待安装成功。默认安装Ubuntu系统。<br />也可以指定版本<br />输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --list --online</span><br></pre></td></tr></table></figure><p>可以查看当前可安装的发行版。<br /><img src="Snipaste_2025-06-08_00-01-29%201.png" alt="" /><br />比如安装Debian，直接输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install Debian</span><br></pre></td></tr></table></figure><p>等待安装完成即可。</p><p><strong>安装完成后提示输入用户名和密码，注意密码输入是不显示的。</strong></p><h3 id="开始使用"><a class="markdownIt-Anchor" href="#开始使用"></a> 开始使用</h3><p>💡如果你的电脑只有那种丑丑的简陋的命令行工具，可以在微软商店下载一个<code>Windows Terminal Preview</code>获得更好的体验<br /><img src="Snipaste_2025-06-08_00-21-38.png" alt="" /></p><h3 id="常用命令速查"><a class="markdownIt-Anchor" href="#常用命令速查"></a> 常用命令速查</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>wsl</code></td><td>启动默认 Linux 发行版</td></tr><tr><td><code>wsl -l -v</code></td><td>查看已安装的发行版和 WSL 版本</td></tr><tr><td><code>wsl --set-version &lt;发行版&gt; 2</code></td><td>将指定发行版升级到 WSL 2</td></tr><tr><td><code>wsl --set-default-version 2</code></td><td>设置默认启动Linux版本</td></tr><tr><td><code>wsl -d &lt;发行版&gt;</code></td><td>启动指定发行版</td></tr><tr><td><code>wsl --shutdown</code></td><td>关闭所有正在运行的 WSL 实例</td></tr><tr><td><code>wsl --unregister &lt;发行版&gt;</code></td><td>卸载发行版</td></tr><tr><td><code>wsl --export Ubuntu ubuntu.tar</code></td><td>对子系统进行备份与恢复 【导出】</td></tr><tr><td><code>wsl --import &lt;自定义名&gt; &lt;目标路径&gt; &lt;.tar源路径&gt;</code></td><td>对子系统进行读取/恢复  【导入】</td></tr></tbody></table><h2 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h2><p>可以使用命令行启动（见上表）也可在<code>Windows Terminal Preview</code>下直接点击<br /><img src="Snipaste_2025-06-08_00-26-24.png" alt="" /><br />即可打开~</p><h2 id="换源"><a class="markdownIt-Anchor" href="#换源"></a> 换源</h2><p>这里使用清华源<br /><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a><br />有详细的使用介绍，根据自己的版本选择文件路径以及格式复制粘贴即可，以Ubuntu24.04为例：<br />使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list.d/ubuntu.sources</span><br></pre></td></tr></table></figure><p>进入编辑页面后，先把原来的配置源删除，再粘贴。<br /><img src="Snipaste_2025-06-08_13-50-00.png" alt="" /><br />然后按<code>Ctrl+O</code> <code>Enter</code> <code>Ctrl+x</code>退出 （&quot;^&quot;指Ctrl &quot;M&quot;指Alt）<br />退出后使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>更新软件包数据库。<br />最后使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><p>升级软件包。</p><h2 id="退出系统"><a class="markdownIt-Anchor" href="#退出系统"></a> 退出系统</h2><p><code>Windows Terminal Preview</code>下，直接叉掉Linux命令行窗口即可退出<br />或在Linux命令行窗口直接使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>推出后等待几秒可以输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><p>查看Liunx状态：是停止<br /><img src="Snipaste_2025-06-08_14-16-16.png" alt="" /><br />还可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><p>一次性关闭所有运行的实例。</p><h2 id="卸载系统"><a class="markdownIt-Anchor" href="#卸载系统"></a> 卸载系统</h2><p>使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister &lt;发行版名&gt;</span><br></pre></td></tr></table></figure><p>即可卸载</p><h2 id="cc-环境搭建"><a class="markdownIt-Anchor" href="#cc-环境搭建"></a> C/C++ 环境搭建</h2><p>比较简单，默认的 Ubuntu 软件源包含了一个软件包组，名称为 “build-essential”,它包含了 GNU 编辑器集合，GNU 调试器，和其他编译软件所必需的开发库和工具。<br />想要安装开发工具软件包，直接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -v</span><br><span class="line">g++ -v</span><br><span class="line">gdb -v</span><br></pre></td></tr></table></figure><p>有一个没有的话 单独安装一下即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gdb</span><br></pre></td></tr></table></figure><h2 id="推荐玩法"><a class="markdownIt-Anchor" href="#推荐玩法"></a> 推荐玩法</h2><h3 id="vscode插件"><a class="markdownIt-Anchor" href="#vscode插件"></a> VScode插件</h3><p>使用 WSL 作为开发环境，结合 VS Code 的 <strong>Remote - WSL 插件</strong>，在 Windows 中编辑、WSL 中运行。<br />直接下载插件<br /><img src="Snipaste_2025-06-08_14-28-45.png" alt="" /><br />在Linux终端打开某个文件夹 然后使用命令即可在Linux环境下运行VScode</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><p><img src="Snipaste_2025-06-08_14-31-11.png" alt="" /><br />还可以直接使用VScode终端输入Linux命令。<br /><img src="Snipaste_2025-06-08_14-43-03.png" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;details&gt;
&lt;summary&gt;版权信息&lt;/summary&gt;
&lt;p&gt;:::warning&lt;/p&gt;
&lt;p&gt;本文章为博主原创文章。遵循 &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans&quot;&gt;C</summary>
      
    
    
    
    <category term="Linux" scheme="https://blog.godmao.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.godmao.top/Tags/Linux/"/>
    
    <category term="WSL2" scheme="https://blog.godmao.top/Tags/WSL2/"/>
    
  </entry>
  
  <entry>
    <title>[自用]16届烂桥杯嵌入式赛道模块代码整理</title>
    <link href="https://blog.godmao.top/posts/44982/"/>
    <id>https://blog.godmao.top/posts/44982/</id>
    <published>2025-04-10T07:19:22.000Z</published>
    <updated>2025-06-08T08:26:04.144Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章为博主原创文章。遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><h2 id="时间片轮询调度"><a class="markdownIt-Anchor" href="#时间片轮询调度"></a> 时间片轮询调度</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> TaskCount = <span class="number">0</span>;<span class="comment">//用于记录任务数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">run,wait,stop</span><br><span class="line">&#125;TaskStatus;<span class="comment">//任务状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">uint8_t</span> TaskRunTime;</span><br><span class="line"><span class="type">uint8_t</span> TaskTimer;</span><br><span class="line">TaskStatus Status;</span><br><span class="line"><span class="type">void</span> (*FC)();</span><br><span class="line">&#125;TaskStrust;<span class="comment">//任务信息块：注意两点1.注意Timer和runtime的数据类型为uchar，最大为255 2.时间片为2ms</span></span><br><span class="line">TaskStrust TaskList[]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OS_Init</span><span class="params">(TIM_HandleTypeDef* htim)</span>&#123;</span><br><span class="line">HAL_TIM_Base_Start_IT(htim);</span><br><span class="line">TaskCount = <span class="keyword">sizeof</span>(TaskList)/<span class="keyword">sizeof</span>(TaskList[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(TaskCount &gt; MAX_TASK) <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OS_IT_Run</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; TaskCount;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(TaskList[i].Status == wait)&#123;</span><br><span class="line"><span class="keyword">if</span>(++TaskList[i].TaskTimer &gt;= TaskList[i].TaskRunTime)&#123;</span><br><span class="line">TaskList[i].TaskTimer = <span class="number">0</span>;</span><br><span class="line">TaskList[i].Status = run;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自带死循环，主函数里运行</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OS_Run</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(TaskList[j].Status == run)&#123;</span><br><span class="line">TaskList[j].FC();</span><br><span class="line">TaskList[j].Status = wait;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(++j &gt;= TaskCount) j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="频率测量"><a class="markdownIt-Anchor" href="#频率测量"></a> 频率测量</h2><p>核心思路：</p><p>1/（（这一次的计数值-上一次记录的计数值）x （1/时钟频率））= 时钟频率/（记录差值）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> i;<span class="comment">//记录当前是第几次。</span></span><br><span class="line">    <span class="type">int</span> former;<span class="comment">//前一次记录的计数值</span></span><br><span class="line">    <span class="type">int</span> now;<span class="comment">//现在记录的计数值</span></span><br><span class="line">    <span class="type">int</span> result;<span class="comment">//频率结果</span></span><br><span class="line">    <span class="type">uint8_t</span> ElapsedTime;<span class="comment">//定时器溢出次数</span></span><br><span class="line">&#125;FreqInfo;</span><br><span class="line"></span><br><span class="line">reqInfo F1 = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">FreqInfo F2 = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动频率测量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Freq_Start</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    HAL_TIM_Base_Start_IT(&amp;htim3);<span class="comment">//对应F1</span></span><br><span class="line">    HAL_TIM_IC_Start_IT(&amp;htim3,TIM_CHANNEL_1);</span><br><span class="line">    HAL_TIM_Base_Start_IT(&amp;htim8);<span class="comment">//对应F2</span></span><br><span class="line">    HAL_TIM_IC_Start_IT(&amp;htim8,TIM_CHANNEL_1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">Freq_Measure</span><span class="params">(FreqInfo* Fx,TIM_HandleTypeDef *htim)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Fx-&gt;i == <span class="number">0</span>)&#123;</span><br><span class="line">        Fx-&gt;result = <span class="number">1000000</span>/(Fx-&gt;now - Fx-&gt;former);</span><br><span class="line">        __HAL_TIM_ENABLE(htim);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Freq_Fuc</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    Freq_Measure(&amp;F1,&amp;htim3);</span><br><span class="line">Freq_Measure(&amp;F2,&amp;htim8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中断</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(htim-&gt;Instance == TIM3)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(F1.i)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: </span><br><span class="line">                F1.former = HAL_TIM_ReadCapturedValue(&amp;htim3,TIM_CHANNEL_1) + <span class="number">65535</span> * F1.ElapsedTime;</span><br><span class="line">                F1.i = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                F1.now = HAL_TIM_ReadCapturedValue(&amp;htim3,TIM_CHANNEL_1) + <span class="number">65535</span> * F1.ElapsedTime;</span><br><span class="line">                __HAL_TIM_DISABLE(&amp;htim3);</span><br><span class="line">                F1.ElapsedTime = <span class="number">0</span>;</span><br><span class="line">                F1.i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(htim-&gt;Instance == TIM8)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(F2.i)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                F2.former = HAL_TIM_ReadCapturedValue(&amp;htim8,TIM_CHANNEL_1) + <span class="number">65535</span> * F2.ElapsedTime;</span><br><span class="line">                F2.i = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                F2.now = HAL_TIM_ReadCapturedValue(&amp;htim8,TIM_CHANNEL_1) + <span class="number">65535</span> * F2.ElapsedTime;</span><br><span class="line">                __HAL_TIM_DISABLE(&amp;htim8);</span><br><span class="line">                F2.ElapsedTime = <span class="number">0</span>;</span><br><span class="line">                F2.i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在溢出中断中记录溢出次数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="共享变量"><a class="markdownIt-Anchor" href="#共享变量"></a> 共享变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SharedData.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">static</span> Data1 shareddata1 = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Data1指针的接口</span></span><br><span class="line">Data1* <span class="title function_">get_shared_data</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;shareddata1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="按键"><a class="markdownIt-Anchor" href="#按键"></a> 按键</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> <span class="title function_">KeyBit</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> keybit = <span class="number">0x00</span>;</span><br><span class="line">    <span class="comment">//读取B1的电平状态并把他左移到bit0位</span></span><br><span class="line">    keybit |= HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//同上</span></span><br><span class="line">    keybit |= HAL_GPIO_ReadPin(B2_GPIO_Port,B2_Pin) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    keybit |= HAL_GPIO_ReadPin(B3_GPIO_Port,B3_Pin) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    keybit |= HAL_GPIO_ReadPin(B4_GPIO_Port,B4_Pin) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> keybit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">task_Key</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> Trg,Cont;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> ReadData = KeyBit() ^ <span class="number">0x0f</span>;   <span class="comment">// 取反：在没有按键按下的情况下，其始终为0x00</span></span><br><span class="line">    Trg = ReadData &amp; (ReadData ^ Cont);             <span class="comment">// 2</span></span><br><span class="line">    Cont = ReadData; </span><br><span class="line">    <span class="keyword">if</span>(Trg &amp;&amp; Cont)&#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(Trg &amp;&amp; Cont == <span class="number">0</span>)&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lcd"><a class="markdownIt-Anchor" href="#lcd"></a> LCD</h2><p>引脚初始化为全低就行</p><h2 id="led"><a class="markdownIt-Anchor" href="#led"></a> LED</h2><p>LD口 为 PD2 低电平不允许写入，高电平允许写入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SharedData.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> LD_state = <span class="number">0</span>;  <span class="comment">//记录LD各位状态</span></span><br><span class="line"><span class="type">uint16_t</span> LD_state_before = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">HAL_GPIO_WritePin(LD1_GPIO_Port,GPIO_PIN_All,GPIO_PIN_SET);</span><br><span class="line">HAL_GPIO_WritePin(LD_load_GPIO_Port,LD_load_Pin,GPIO_PIN_SET);</span><br><span class="line">HAL_GPIO_WritePin(LD_load_GPIO_Port,LD_load_Pin,GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_lightLD</span><span class="params">(<span class="type">uint8_t</span> LDnum)</span>&#123;</span><br><span class="line"></span><br><span class="line">LD_state |= (LD1_Pin &lt;&lt; LDnum); <span class="comment">//其他位不变，需要改变的位变为1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_closeLD</span><span class="params">(<span class="type">uint8_t</span> LDnum)</span>&#123; </span><br><span class="line"></span><br><span class="line">LD_state &amp;= ~(LD1_Pin &lt;&lt; LDnum); <span class="comment">//其他位不变，需改变的位变为0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Call_ChangeLD</span><span class="params">(<span class="type">void</span>(*fc)(<span class="type">uint8_t</span>),<span class="type">uint8_t</span> LDnum)</span>&#123;</span><br><span class="line"></span><br><span class="line">LDnum -= <span class="number">1</span>;</span><br><span class="line">fc(LDnum);</span><br><span class="line"><span class="keyword">if</span>(LD_state_before != LD_state)&#123;</span><br><span class="line">HAL_GPIO_WritePin(LD_load_GPIO_Port,LD_load_Pin,GPIO_PIN_SET);</span><br><span class="line">HAL_GPIO_WritePin(LD1_GPIO_Port,GPIO_PIN_All,GPIO_PIN_SET);</span><br><span class="line">HAL_GPIO_WritePin(LD1_GPIO_Port,LD_state,GPIO_PIN_RESET);</span><br><span class="line">HAL_GPIO_WritePin(LD_load_GPIO_Port,LD_load_Pin,GPIO_PIN_RESET);</span><br><span class="line">LD_state_before = LD_state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Fuc</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Read_Show_index(<span class="number">0</span>)) &#123;</span><br><span class="line">Call_ChangeLD(LED_closeLD,<span class="number">1</span>);</span><br><span class="line">Call_ChangeLD(LED_lightLD,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Call_ChangeLD(LED_closeLD,<span class="number">2</span>);</span><br><span class="line">Call_ChangeLD(LED_lightLD,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Read_Show_index(<span class="number">1</span>))&#123;</span><br><span class="line">Call_ChangeLD(LED_lightLD,<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> Call_ChangeLD(LED_closeLD,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="串口重定向与数据处理"><a class="markdownIt-Anchor" href="#串口重定向与数据处理"></a> 串口重定向与数据处理</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 50</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CMDNUM 6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TF1</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">TF2</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PF1</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PF2</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">returnF1</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">returnF2</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> rx_DataBuffer[BUFFER_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> tx_DataBuffer[BUFFER_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> cmd[BUFFER_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> tx_len = <span class="number">0</span>;  <span class="comment">// 当前缓冲区数据长度</span></span><br><span class="line"><span class="type">uint8_t</span> tx_busy = <span class="number">0</span>;  <span class="comment">// 发送状态标志</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> rx_handle = <span class="number">0</span>; <span class="comment">//处理接收数据标志</span></span><br><span class="line"><span class="type">uint8_t</span> rx_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">uint8_t</span>* cmd_str;</span><br><span class="line">    <span class="type">void</span> (*fc)();</span><br><span class="line">&#125;cmdinfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmdinfo cmdlist[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;TF1&quot;</span>,TF1&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;TF2&quot;</span>,TF2&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;PF1&quot;</span>,PF1&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;PF2&quot;</span>,PF2&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;F1&quot;</span>,returnF1&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;F2&quot;</span>,returnF2&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TheUART_start</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    HAL_UARTEx_ReceiveToIdle_DMA(&amp;huart1,(<span class="type">uint8_t</span>*)rx_DataBuffer,<span class="number">0x0f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TheUART_dma_transmit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果 DMA 还在忙，则不启动新的传输</span></span><br><span class="line">    <span class="keyword">if</span> (tx_busy) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    tx_busy = <span class="number">1</span>;  <span class="comment">// 标记为发送中</span></span><br><span class="line">    HAL_UART_Transmit_DMA(&amp;huart1,(<span class="type">uint8_t</span>*)tx_DataBuffer,tx_len<span class="number">-1</span>);<span class="comment">//-1为了防止傻逼烂桥杯的验证程序不通过</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 确保缓冲区不会溢出</span></span><br><span class="line">    <span class="keyword">if</span> (tx_len &lt; BUFFER_SIZE - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tx_DataBuffer[tx_len++] = (<span class="type">uint8_t</span>)ch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果遇到换行符，或者缓冲区接近满，就启动 DMA 发送</span></span><br><span class="line">    <span class="comment">// 注意咯，如果缓冲区没满的情况下，只有检测到/n才会触发DMA的发送。所以在缓</span></span><br><span class="line">    <span class="comment">// 冲区没满的情况下，如果你想要发送字符串&quot;abc&quot;，printf(&quot;abc&quot;)是没用的，</span></span><br><span class="line">    <span class="comment">// printf(&quot;abc\n&quot;)才有用哦。</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span> || tx_len &gt;= BUFFER_SIZE - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        TheUART_dma_transmit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TheUART_HandleRxdata</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(rx_handle == <span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(cmd,rx_DataBuffer);</span><br><span class="line">        cmd[rx_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!Read_Show_index(<span class="number">1</span>))&#123;</span><br><span class="line">            other();</span><br><span class="line">            rx_len = <span class="number">0</span>;</span><br><span class="line">            rx_handle = <span class="number">0</span>;</span><br><span class="line">            TheUART_start();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; CMDNUM;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>((<span class="type">const</span> <span class="type">char</span>*)cmd,(<span class="type">const</span> <span class="type">char</span>*)cmdlist[i].cmd_str) == <span class="number">0</span>)&#123;</span><br><span class="line">                cmdlist[i].fc();</span><br><span class="line">                rx_len = <span class="number">0</span>;</span><br><span class="line">                rx_handle = <span class="number">0</span>;</span><br><span class="line">                TheUART_start();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        other();</span><br><span class="line">        rx_len = <span class="number">0</span>;</span><br><span class="line">        rx_handle = <span class="number">0</span>;</span><br><span class="line">        TheUART_start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TF1</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TF2</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PF1</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PF2</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">returnF1</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">returnF2</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">other</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中断</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_TxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(huart-&gt;Instance == USART1)  <span class="comment">// 确保是目标串口</span></span><br><span class="line">    &#123;</span><br><span class="line">        tx_len = <span class="number">0</span>;  <span class="comment">// 清空缓冲区</span></span><br><span class="line">        tx_busy = <span class="number">0</span>; <span class="comment">// 标记为可用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UARTEx_RxEventCallback</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint16_t</span> Size)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(huart-&gt;Instance == USART1)&#123;</span><br><span class="line">        rx_len = Size;</span><br><span class="line">        rx_handle = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="adc使用定时器trgo信号触发adc转换"><a class="markdownIt-Anchor" href="#adc使用定时器trgo信号触发adc转换"></a> ADC：使用定时器TRGO信号触发ADC转换</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> ADC_Data = .<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ADCFuc_Init</span><span class="params">(ADC_HandleTypeDef *hadc)</span>&#123;</span><br><span class="line">    HAL_ADCEx_Calibration_Start(hadc,ADC_SINGLE_ENDED);<span class="comment">//校准</span></span><br><span class="line">    HAL_ADC_Start_IT(hadc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="title function_">ADCFuc_ReturnResult</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">double</span> result = ADC_Data;</span><br><span class="line">    result = (result / <span class="number">4095.0</span>) * <span class="number">3.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//中断-------------------------------------------------------------//</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_ADC_ConvCpltCallback</span><span class="params">(ADC_HandleTypeDef *hadc)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hadc-&gt;Instance == ADC2)&#123;</span><br><span class="line">        ADC_Data = HAL_ADC_GetValue(&amp;hadc2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="at24c02"><a class="markdownIt-Anchor" href="#at24c02"></a> at24c02</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">include <span class="string">&quot;i2c_hal.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COMMAND_W   0xA0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COMMAND_R   0xA1</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">at24c02_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    I2CInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// @brief at24c02写数据</span></span><br><span class="line"><span class="comment">/// @param address 要写入的地址</span></span><br><span class="line"><span class="comment">/// @param data 要写入的数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">at24c02_Write</span><span class="params">(<span class="type">uint8_t</span> address,<span class="type">uint8_t</span> data)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    I2CStart();</span><br><span class="line"></span><br><span class="line">    I2CSendByte(COMMAND_W);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    I2CSendByte(address);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    I2CSendByte(data);</span><br><span class="line">    I2CWaitAck(); </span><br><span class="line"></span><br><span class="line">    I2CStop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// @brief at24c02读数据</span></span><br><span class="line"><span class="comment">/// @param address 要读数据的地址</span></span><br><span class="line"><span class="comment">/// @return 读出的数据</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">at24c02_Read</span><span class="params">(<span class="type">uint8_t</span> address)</span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> data = <span class="number">0</span>;</span><br><span class="line">    I2CStart();</span><br><span class="line"></span><br><span class="line">    I2CSendByte(COMMAND_W);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    I2CSendByte(address);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    I2CStart();<span class="comment">//不释放总线的情况下重启通信，发送读命令。</span></span><br><span class="line"></span><br><span class="line">    I2CSendByte(COMMAND_R);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    data = I2CReceiveByte();</span><br><span class="line">    I2CSendNotAck();<span class="comment">//通知从机不再发送数据</span></span><br><span class="line"></span><br><span class="line">    I2CStop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="韩信在干嘛韩信在偷塔能做到吗哇他出了一个名刀司命猫雷"><a class="markdownIt-Anchor" href="#韩信在干嘛韩信在偷塔能做到吗哇他出了一个名刀司命猫雷"></a> 韩信在干嘛？韩信在偷塔！能做到吗？哇他出了一个名刀·司命！猫雷！</h2><p>挂一张梦老师保佑！<br /><img src="https://tiebapic.baidu.com/forum/w%3D580%3B/sign=770517cb7fdbb6fd255be52e391faa18/8326cffc1e178a829fdedc90b003738da977e824.jpg?tbpicau=2025-04-12-05_1fd40d1758be922db3d2562ec3e230c3" alt="" /></p>]]></content>
    
    
    <summary type="html">自用。</summary>
    
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="程序架构" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="蓝桥杯" scheme="https://blog.godmao.top/Tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>hexo主题Klise-enhanced使用文档</title>
    <link href="https://blog.godmao.top/posts/20333/"/>
    <id>https://blog.godmao.top/posts/20333/</id>
    <published>2025-04-06T07:09:50.000Z</published>
    <updated>2025-04-06T09:00:52.000Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章为博主原创文章。遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>本主题是根据dewjonh的hexo主题<a href="https://github.com/dewjohn/hexo-theme-Klise">Klise</a>改的，我非常喜欢这款主题，但是由于此主题原作者好像不再维护，对hexo的现版本（2024）的适配不太好，于是便自己修修补补用着🙂但是由于我没有太多的精力分配在前端上，所以有些代码可能有些不专业，希望各位大佬见谅并指正。当然如果有任何bug请尽管issue，我会尽力修复！</p><h2 id="主题概览"><a class="markdownIt-Anchor" href="#主题概览"></a> 主题概览</h2><p><img src="Snipaste_2025-04-06_15-26-39.png" alt="" /></p><p><img src="Snipaste_2025-04-06_15-27-19.png" alt="" /></p><p><img src="Snipaste_2025-04-06_15-27-54.png" alt="" /></p><p>你可以查看<a href="https://im.godmao.top/">demo</a>或<a href="https://im.godmao.top/">我的博客</a>来阅览主题效果。</p><h2 id="相较于原版有何改动"><a class="markdownIt-Anchor" href="#相较于原版有何改动"></a> 相较于原版有何改动</h2><ul><li>😢把scss全编译为css了，只有一个main.css文件，包含了所有的渲染样式…不过不用担心我注释了嘻嘻🤓</li><li>将原主题的深色模式进一步适配，并修改了一些元素的显示风格。</li></ul><h2 id="使用方法"><a class="markdownIt-Anchor" href="#使用方法"></a> 使用方法</h2><h3 id="首先"><a class="markdownIt-Anchor" href="#首先"></a> 首先，</h3><p>你需要下载一个字数统计插件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>如果不想要下载或无法下载成功，你也可以放弃字数统计功能。前往主题文件夹下的<code>layout\post.ejs</code>删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字数: &lt;span class=&quot;post-count&quot;&gt;&lt;%= wordcount(page.content) %&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">预计阅读时间: &lt;span class=&quot;post-count&quot;&gt;&lt;%= min2read(page.content) %&gt;min&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>两行。</p><h3 id="然后"><a class="markdownIt-Anchor" href="#然后"></a> 然后，</h3><p>安装主题文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/g0dmao/hexo-theme-Klise-enhanced.git</span><br></pre></td></tr></table></figure><p>将主题根目录的<code>_config.hexo-theme-Klise-enhanced.yml</code>移动到博客根目录。你可以打开该文件进行主题的一些配置。</p><p>在博客配置文件<code>_config.yml</code>中启用主题。</p><h3 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后，</h3><p>enjoy！</p><h2 id="个性化部分"><a class="markdownIt-Anchor" href="#个性化部分"></a> 个性化部分</h2><h3 id="自定义背景"><a class="markdownIt-Anchor" href="#自定义背景"></a> 自定义背景</h3><p>打开主题文件夹下的<code>source\css\main.css</code>在头部修改，可以自定义明暗模式下不同的背景，已做好注释。</p><h3 id="当网页失去焦点时标签页标题的显示文字"><a class="markdownIt-Anchor" href="#当网页失去焦点时标签页标题的显示文字"></a> 当网页失去焦点时标签页标题的显示文字</h3><p>打开主题文件夹下的<code>layout\layout.ejs</code> 修改document.title即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">visibilityState</span> == <span class="string">&#x27;hidden&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      normal_title = <span class="variable language_">document</span>.<span class="property">title</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;点一下&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">else</span> <span class="variable language_">document</span>.<span class="property">title</span> = normal_title;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="可选"><a class="markdownIt-Anchor" href="#可选"></a> 可选</h3><p>你可以安装如下插件获得更好的浏览体验。</p><h4 id="hexo-renderer-markdown-it-plus"><a class="markdownIt-Anchor" href="#hexo-renderer-markdown-it-plus"></a> hexo-renderer-markdown-it-plus</h4><p>不使用自带的md渲染器。使用markdown-it渲染器，丰富的插件提供更好的md浏览体验。</p><h4 id="hexo-tips"><a class="markdownIt-Anchor" href="#hexo-tips"></a> hexo-tips</h4><p>在文章中生成各种提示卡片，此主题已做好适配。</p><h4 id="hexo-blog-encrypt"><a class="markdownIt-Anchor" href="#hexo-blog-encrypt"></a> hexo-blog-encrypt</h4><p>文章加密插件。</p><h2 id="可能的问题"><a class="markdownIt-Anchor" href="#可能的问题"></a> 可能的问题</h2><h3 id="tags-categories页面显示不正确"><a class="markdownIt-Anchor" href="#tags-categories页面显示不正确"></a> tags、categories页面显示不正确</h3><p>首先检查页面的路径设置是否正确。若正确则试着在相应页面的<code>index.md</code> 里添加type和layout标签：<br /><img src="Snipaste_2025-04-06_16-18-33.png" alt="" /><br />tags页面 type、layout 为tags。<br />categories页面 type、layout 为 categories。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;details&gt;
&lt;summary&gt;版权信息&lt;/summary&gt;
&lt;p&gt;:::warning&lt;/p&gt;
&lt;p&gt;本文章为博主原创文章。遵循 &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans&quot;&gt;C</summary>
      
    
    
    
    <category term="web前端" scheme="https://blog.godmao.top/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="网页" scheme="https://blog.godmao.top/Tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="hexo主题" scheme="https://blog.godmao.top/Tags/hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>从c底层到嵌入式驱动开发的学习参考路线</title>
    <link href="https://blog.godmao.top/posts/25619/"/>
    <id>https://blog.godmao.top/posts/25619/</id>
    <published>2025-04-05T15:21:06.000Z</published>
    <updated>2025-04-05T15:24:28.000Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章为博主原创文章。遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><p>以下是专为 <strong>嵌入式Linux驱动开发工程师</strong> 设计的 <strong>学习路线</strong>，整合了目标、重点、时间分配、书籍推荐和实战建议，力求清晰高效。由<code>deepseekR1</code>生成。</p><hr /><h3 id="一-学习路线总图"><a class="markdownIt-Anchor" href="#一-学习路线总图"></a> <strong>一、学习路线总图</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">  A[C语言+硬件] --&gt; B[操作系统+驱动基础] --&gt; C[驱动专项+内核机制] --&gt; D[实战深化]</span><br></pre></td></tr></table></figure><hr /><h3 id="二-分阶段详解"><a class="markdownIt-Anchor" href="#二-分阶段详解"></a> <strong>二、分阶段详解</strong></h3><h4 id="阶段1c语言与硬件交互1-2个月"><a class="markdownIt-Anchor" href="#阶段1c语言与硬件交互1-2个月"></a> <strong>阶段1：C语言与硬件交互（1-2个月）</strong></h4><p><strong>目标</strong>：</p><ul><li>掌握C语言底层操作能力，理解程序如何直接控制硬件。</li></ul><p><strong>核心内容</strong>：</p><table><thead><tr><th><strong>知识点</strong></th><th><strong>必要程度</strong></th><th><strong>深入程度</strong></th><th><strong>推荐书籍/资源</strong></th></tr></thead><tbody><tr><td>指针与内存管理</td><td>★★★★★</td><td>理解内存布局</td><td>《C程序设计语言》（K&amp;R）</td></tr><tr><td>结构体与位操作</td><td>★★★★☆</td><td>能操作寄存器</td><td>《嵌入式C语言自我修养》</td></tr><tr><td>汇编基础</td><td>★★★☆☆</td><td>阅读简单汇编</td><td>《ARM Cortex-M权威指南》</td></tr><tr><td>编译流程（GCC）</td><td>★★★★☆</td><td>熟悉预处理-链接</td><td>CSAPP第3章</td></tr><tr><td>硬件交互（GPIO）</td><td>★★★★☆</td><td>裸机程序开发</td><td>STM32官方手册</td></tr></tbody></table><p><strong>实践项目</strong>：</p><ol><li>用STM32直接操作寄存器点亮LED（无需库函数）。</li><li>用C实现内存池分配器（模拟<code>malloc/free</code>）。</li></ol><p><strong>工具</strong>：</p><ul><li><strong>STM32CubeIDE</strong>：调试裸机程序。</li><li><strong>objdump</strong>：反汇编查看代码生成。</li></ul><p><strong>对Linux的用处</strong>：</p><ul><li>理解驱动中 <strong>寄存器映射</strong>（如<code>ioremap</code>）。</li><li>诊断 <strong>内存越界</strong> 和 <strong>硬件访问错误</strong>。</li></ul><hr /><h4 id="阶段2操作系统核心驱动基础2-3个月"><a class="markdownIt-Anchor" href="#阶段2操作系统核心驱动基础2-3个月"></a> <strong>阶段2：操作系统核心+驱动基础（2-3个月）</strong></h4><p><strong>目标</strong>：</p><ul><li>理解操作系统核心机制，入门Linux驱动开发。</li></ul><p><strong>核心内容</strong>：</p><table><thead><tr><th><strong>知识点</strong></th><th><strong>必要程度</strong></th><th><strong>深入程度</strong></th><th><strong>推荐书籍/资源</strong></th></tr></thead><tbody><tr><td>进程与线程</td><td>★★★☆☆</td><td>理解上下文切换</td><td>《操作系统导论》（OSTEP）</td></tr><tr><td>虚拟内存</td><td>★★★★☆</td><td>页表工作原理</td><td>《深入理解计算机系统》第9章</td></tr><tr><td>中断与异常</td><td>★★★★☆</td><td>中断处理流程</td><td>《Linux设备驱动程序》（LDD3）</td></tr><tr><td>内核模块开发</td><td>★★★★★</td><td>字符设备驱动</td><td>LDD3第3章</td></tr><tr><td>设备树（DT）</td><td>★★★★☆</td><td>解析硬件配置</td><td>内核文档《Device Tree Usage》</td></tr></tbody></table><p><strong>实践项目</strong>：</p><ol><li>编写虚拟字符设备驱动（实现<code>read</code>/<code>write</code>）。</li><li>为LED驱动添加设备树支持（<code>.dts</code>文件配置）。</li></ol><p><strong>工具</strong>：</p><ul><li><strong>QEMU</strong>：模拟ARM设备运行Linux。</li><li><strong>dmesg</strong>：查看内核日志。</li></ul><p><strong>对Linux的用处</strong>：</p><ul><li>掌握驱动开发框架（<code>file_operations</code>）。</li><li>理解 <strong>设备树</strong> 如何解耦硬件配置。</li></ul><hr /><h4 id="阶段3驱动专项内核机制3-6个月"><a class="markdownIt-Anchor" href="#阶段3驱动专项内核机制3-6个月"></a> <strong>阶段3：驱动专项+内核机制（3-6个月）</strong></h4><p><strong>目标</strong>：</p><ul><li>精通主流驱动开发技术，深入内核核心机制。</li></ul><p><strong>核心内容</strong>：</p><table><thead><tr><th><strong>知识点</strong></th><th><strong>必要程度</strong></th><th><strong>深入程度</strong></th><th><strong>推荐书籍/资源</strong></th></tr></thead><tbody><tr><td>GPIO/I2C/SPI驱动</td><td>★★★★★</td><td>完整驱动开发</td><td>《精通Linux设备驱动程序开发》</td></tr><tr><td>中断处理</td><td>★★★★★</td><td>顶半部/底半部</td><td>内核源码<code>drivers/irqchip</code></td></tr><tr><td>内核同步机制</td><td>★★★★☆</td><td>自旋锁/RCU</td><td>《Linux内核设计与实现》第5章</td></tr><tr><td>DMA与内存管理</td><td>★★★☆☆</td><td>缓存一致性</td><td>内核文档《DMA-API-HOWTO》</td></tr><tr><td>电源管理</td><td>★★★☆☆</td><td>suspend/resume</td><td>内核文档《Power Management》</td></tr></tbody></table><p><strong>实践项目</strong>：</p><ol><li>为树莓派开发I2C传感器驱动（如BMP280）。</li><li>实现带中断的按键驱动（<code>request_irq</code>）。</li></ol><p><strong>工具</strong>：</p><ul><li><strong>逻辑分析仪</strong>：抓取SPI/I2C时序。</li><li><strong>perf</strong>：分析驱动性能瓶颈。</li></ul><p><strong>对Linux的用处</strong>：</p><ul><li>掌握真实硬件驱动开发流程。</li><li>理解内核 <strong>并发控制</strong> 和 <strong>中断优化</strong>。</li></ul><hr /><h4 id="阶段4实战深化持续学习"><a class="markdownIt-Anchor" href="#阶段4实战深化持续学习"></a> <strong>阶段4：实战深化（持续学习）</strong></h4><p><strong>目标</strong>：</p><ul><li>参与真实项目，解决复杂问题。</li></ul><p><strong>核心内容</strong>：</p><table><thead><tr><th><strong>知识点</strong></th><th><strong>必要程度</strong></th><th><strong>深入程度</strong></th><th><strong>推荐资源</strong></th></tr></thead><tbody><tr><td>内核子系统</td><td>★★★★☆</td><td>输入/IIO子系统</td><td>内核源码<code>drivers/input</code></td></tr><tr><td>调试与调优</td><td>★★★★☆</td><td>ftrace/kgdb</td><td>内核文档《ftrace使用指南》</td></tr><tr><td>社区贡献</td><td>★★★☆☆</td><td>提交内核补丁</td><td>LKML（Linux内核邮件列表）</td></tr></tbody></table><p><strong>实践项目</strong>：</p><ol><li>为开源驱动修复Bug（如内核Bugzilla中的简单问题）。</li><li>优化驱动性能（减少中断延迟或内存占用）。</li></ol><p><strong>工具</strong>：</p><ul><li><strong>git</strong>：管理内核代码修改。</li><li><strong><a href="http://checkpatch.pl">checkpatch.pl</a></strong>：检查代码规范。</li></ul><p><strong>对Linux的用处</strong>：</p><ul><li>积累真实项目经验，提升工程能力。</li><li>理解Linux内核社区的协作方式。</li></ul><hr /><h3 id="三-时间分配建议"><a class="markdownIt-Anchor" href="#三-时间分配建议"></a> <strong>三、时间分配建议</strong></h3><table><thead><tr><th><strong>阶段</strong></th><th><strong>建议时长</strong></th><th><strong>核心目标</strong></th><th><strong>时间占比</strong></th></tr></thead><tbody><tr><td>C语言与硬件交互</td><td>1-2个月</td><td>裸机操作寄存器</td><td>15%</td></tr><tr><td>操作系统+驱动基础</td><td>2-3个月</td><td>字符设备驱动+设备树</td><td>30%</td></tr><tr><td>驱动专项+内核机制</td><td>3-6个月</td><td>GPIO/I2C/中断驱动开发</td><td>40%</td></tr><tr><td>实战深化</td><td>持续</td><td>项目经验+社区贡献</td><td>15%</td></tr></tbody></table><hr /><h3 id="四-驱动开发工程师核心能力"><a class="markdownIt-Anchor" href="#四-驱动开发工程师核心能力"></a> <strong>四、驱动开发工程师核心能力</strong></h3><ol><li><p><strong>硬件能力</strong>：</p><ul><li>阅读芯片手册（如时钟配置、寄存器定义）。</li><li>使用示波器调试I2C/SPI通信问题。</li></ul></li><li><p><strong>内核能力</strong>：</p><ul><li>编写符合内核编码规范（<code>checkpatch.pl</code>）的代码。</li><li>理解设备模型（总线/设备/驱动）。</li></ul></li><li><p><strong>调试能力</strong>：</p><ul><li>分析内核Oops和Panic日志。</li><li>使用<code>trace-cmd</code>跟踪函数调用链。</li></ul></li></ol><hr /><h3 id="五-学习建议与避坑"><a class="markdownIt-Anchor" href="#五-学习建议与避坑"></a> <strong>五、学习建议与避坑</strong></h3><ol><li><p><strong>必做</strong>：</p><ul><li>每天阅读内核驱动源码（如<code>drivers/gpio</code>）。</li><li>用真实硬件（树莓派/BeagleBone）替代仿真。</li></ul></li><li><p><strong>避免</strong>：</p><ul><li>沉迷自制操作系统内核（除非目标为内核研发）。</li><li>过早研究编译器后端优化（如LLVM Pass）。</li></ul></li><li><p><strong>捷径</strong>：</p><ul><li>直接参考内核中类似驱动的实现（如<code>drivers/i2c/busses/i2c-bcm2835.c</code>）。</li><li>参与开源社区（从文档改进开始）。</li></ul></li></ol><hr /><h3 id="六-驱动开发面试常见问题"><a class="markdownIt-Anchor" href="#六-驱动开发面试常见问题"></a> <strong>六、驱动开发面试常见问题</strong></h3><ul><li><p><strong>基础问题</strong>：</p><ul><li>解释<code>platform_driver</code>和<code>platform_device</code>的作用。</li><li>自旋锁为什么不能在睡眠场景使用？</li></ul></li><li><p><strong>实战问题</strong>：</p><ul><li>如何为一个新硬件编写设备树节点？</li><li>驱动中出现<code>Unable to handle kernel paging request</code>如何调试？</li></ul></li></ul><hr /><p>按此路线，<strong>12-18个月</strong> 可达到嵌入式Linux驱动工程师的入职要求。<strong>记住：驱动开发的本质是“用软件精确描述硬件行为”</strong>，保持对硬件的敏感度是关键！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;details&gt;
&lt;summary&gt;版权信息&lt;/summary&gt;
&lt;p&gt;:::warning&lt;/p&gt;
&lt;p&gt;本文章为博主原创文章。遵循 &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans&quot;&gt;C</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/Tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="学习路线" scheme="https://blog.godmao.top/Tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>Kelly McGonigal, Ph.D.《自控力》第四章阅读感悟</title>
    <link href="https://blog.godmao.top/posts/57146/"/>
    <id>https://blog.godmao.top/posts/57146/</id>
    <published>2025-04-04T03:32:41.000Z</published>
    <updated>2025-06-08T14:35:07.512Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="兄弟别搞，想看联系我。" data-whm="这个文章不能被校验, 不过你还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="5727f1ec7f0853418860903bb258ecdd883295eea2159e5f3b7952d887892b91"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-up">      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-up">文章已加密</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">???</summary>
    
    
    
    <category term="阅读" scheme="https://blog.godmao.top/categories/%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="阅读感悟" scheme="https://blog.godmao.top/Tags/%E9%98%85%E8%AF%BB%E6%84%9F%E6%82%9F/"/>
    
    <category term="自控力" scheme="https://blog.godmao.top/Tags/%E8%87%AA%E6%8E%A7%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>三行代码实现按键的长短按检测</title>
    <link href="https://blog.godmao.top/posts/862/"/>
    <id>https://blog.godmao.top/posts/862/</id>
    <published>2025-03-22T04:38:43.000Z</published>
    <updated>2025-03-28T15:51:32.000Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><h2 id="话不多说直接上代码"><a class="markdownIt-Anchor" href="#话不多说直接上代码"></a> 话不多说直接上代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">uchar cont,trg;    <span class="comment">//triger触发 continue连续</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">KeyScan</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">uchar ReadData =  PINB^<span class="number">0xff</span>;</span><br><span class="line">trg = ReadData &amp; (ReadData^cont);</span><br><span class="line">cont = ReadData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就完事了，灰常的amzing啊。</p><h2 id="尝试理解"><a class="markdownIt-Anchor" href="#尝试理解"></a> 尝试理解</h2><p>首先我们要理解<code>PINB</code>，这里的<code>PINB</code>指的是我们的单片机GPIOB的所有Pin的端口数据，而每个端口的数据（高/低——1/0）对应1个bit位。例如某单片机有八个端口只有端口0为高，其余皆为低，则PINB=0000 0001。在STM32Hal库中，我们可以这样实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> <span class="title function_">KeyBit</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> keybit = <span class="number">0x00</span>;</span><br><span class="line">    <span class="comment">//读取B1的电平状态并把他左移到bit0位</span></span><br><span class="line">    keybit |= HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//同上</span></span><br><span class="line">    keybit |= HAL_GPIO_ReadPin(B2_GPIO_Port,B2_Pin) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    keybit |= HAL_GPIO_ReadPin(B3_GPIO_Port,B3_Pin) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    keybit |= HAL_GPIO_ReadPin(B4_GPIO_Port,B4_Pin) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> keybit; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取反"><a class="markdownIt-Anchor" href="#取反"></a> 取反</h3><p>第一行代码就相当于是取反操作，使没有按键按下时data始终为0x00。</p><p>注意，不一定就是异或0xff，按照上面的hal库方法，你的PINB变量实际上只有四位有效位，为了让没有按键按下时data为0x00，我们异或0x0f即可，或者将keybit初始化为0xf0然后异或0xff；而有时GPIO输入接了下拉，没有输入的情况本来就是0，这时就不需要再取反。反正就是要让它没有按键按下时等于0x00。</p><details><summary>点击即看异或真值表</summary><p>与0异或不变，与1异或取反</p><table><thead><tr><th>A</th><th>B</th><th>A ⊕ B</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table></details><h3 id="单击按下"><a class="markdownIt-Anchor" href="#单击按下"></a> 单击按下</h3><p>第一次PB0按下的情况<br />端口数据原本为0xfe，ReadData读端口并且取反，变为 0x01 （第一行）。<br />因为这是第一次按下，所以Cont是上次的值，应为为0。与0异或不改变原有值，那么第二行执行的实际是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Trg</span> = <span class="number">0</span>x01 &amp; (<span class="number">0</span>x01^<span class="number">0</span>x00) = <span class="number">0</span>x01  </span><br></pre></td></tr></table></figure><p>将cont赋值</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Cont</span> <span class="operator">=</span> ReadData <span class="operator">=</span> <span class="number">0</span>x01</span><br></pre></td></tr></table></figure><p>结果就是：</p><ul><li>ReadData ＝ 0x01</li><li>Trg ＝ 0x01</li><li>Cont ＝ 0x01</li></ul><h3 id="按下后还没有完全松开引申到长按"><a class="markdownIt-Anchor" href="#按下后还没有完全松开引申到长按"></a> 按下后还没有完全松开（引申到长按）</h3><p>此时程序依然在执行。</p><ul><li>第一行：不变，依然为0x01。</li><li>第二行：操作为——把检测到的按下按钮对应的bit为给置0了，让Trg等于0了</li><li>第三行：不变，依然为0x01。</li></ul><p>我们可以看到唯一变了的地方就是Trg被置0了。</p><h3 id="完全松开"><a class="markdownIt-Anchor" href="#完全松开"></a> 完全松开</h3><p>很好理解，肯定全为0x00了。</p><h3 id="笔者的思考"><a class="markdownIt-Anchor" href="#笔者的思考"></a> 笔者的思考</h3><p>该代码的核心思路我认为是用三种不同的数据内容代表不同的三种情况（未按下、单按、长按）按照这种思路，我们甚至还可以扩展。</p><p><code>ReadData</code>存储原始的端口电平数据，不能改变。后续的两个数据都会基于这个原始数据。<br /><code>Trg</code> 用于按键触发。<code>ReadData</code>中有bit位有上升沿时，Trg会记录这个上升沿：只有bit从0变为1，Trg才会置1。按下判断的条件是：<code>Trg</code>、<code>Cont</code>均为1。<br /><code>Cont</code> 用于长按。长按的判断条件是：<code>Trg</code>为0的情况下<code>Cont</code>依然为1。</p><p>这样的思路让我联想到了3-8译码器的巧妙设计，通过3个值的输入，可以得到8个值的输出，用3个值就可以为8个不同的情况进行处理。</p><h2 id="在stm32中使用"><a class="markdownIt-Anchor" href="#在stm32中使用"></a> 在STM32中使用</h2><p>附上我的使用方法，我使用的是<a href="http://im.godmao.top/posts/39448/">时间片轮询架构</a>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B1 0x01</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B2 0x02</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B3 0x04</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B4 0x08</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">KeyBit</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> keybit = <span class="number">0x00</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取B1的电平状态并把他左移到bit0位</span></span><br><span class="line">    keybit |= HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//同上</span></span><br><span class="line">    keybit |= HAL_GPIO_ReadPin(B2_GPIO_Port,B2_Pin) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    keybit |= HAL_GPIO_ReadPin(B3_GPIO_Port,B3_Pin) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    keybit |= HAL_GPIO_ReadPin(B4_GPIO_Port,B4_Pin) &lt;&lt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> keybit;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">KeyFuc</span><span class="params">(<span class="type">void</span>)</span>&#123;<span class="comment">//按键逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">uint8_t</span> i = <span class="number">0</span>;                           <span class="comment">//长按时间计数器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//核心代码：三行代码完成按键单、长按检测</span></span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> ReadData = KeyBit() ^ <span class="number">0x0f</span>;       <span class="comment">// 取反：在没有按键按下的情况下，其始终为0x00</span></span><br><span class="line"></span><br><span class="line">    Trg = ReadData &amp; (ReadData ^ Cont);             <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    Cont = ReadData;                                <span class="comment">// 3                        </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(Trg &amp;&amp; Cont)&#123;<span class="comment">//单击逻辑      </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(Trg)&#123;                            </span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> B4: Key4_Fuc();<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> B3: Key3_Fuc();<span class="keyword">break</span>;          </span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> B2: Key2_Fuc();<span class="keyword">break</span>;          </span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> B1: Key1_Fuc();<span class="keyword">break</span>;  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(Cont &amp;&amp; <span class="number">0</span> == Trg) i++;<span class="comment">//以下为长按逻辑</span></span><br><span class="line">    <span class="keyword">else</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(i &gt;= <span class="number">20</span>)&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(Cont)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> B3: Key3_Fuc_Preesed();<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="关于消抖问题"><a class="markdownIt-Anchor" href="#关于消抖问题"></a> 关于消抖问题</h2><p><s>不知道为什么，按理来说是需要消抖的，但是实际跑起来的时候没有消抖也非常稳，，，可能是我的按键检测任务执行间隔比较长？</s></p><hr /><p>2025.03.28 补充修改：如果使用时间片轮询调度，理论上如果按键扫描任务执行间隔时间较长，是不用消抖的。这就解释了为什么我的程序没有消抖也那么稳！例如，假设你设置的时间片调度间隔是 100ms，如果按键每次扫描时是 100ms 执行一次，假设按键抖动的周期是 10ms，那么每次扫描时按键就已经稳定了。这样，按键的物理状态变化就不太可能被误判为多个状态变化，因为时间间隔本身已经足够长。当然代价是 <strong>会牺牲按键响应速度，以及无法应用快速连按的按键逻辑</strong></p><hr /><p>关于消抖我还没有实际上机跑过，但是也写一下，Deepseek写的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DEBOUNCE_TIME 1 <span class="comment">//消抖时间参数，根据时间片的时间来设定</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    KEY_STATE_IDLE,<span class="comment">//空闲</span></span><br><span class="line">    KEY_STATE_PRESSED,<span class="comment">//按下</span></span><br><span class="line">    KEY_STATE_RELEASED<span class="comment">//松开</span></span><br><span class="line">&#125; KeyState;</span><br><span class="line"></span><br><span class="line">KeyState key_state = KEY_STATE_IDLE;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> debounce_timer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">KeyScan</span><span class="params">()</span> &#123;</span><br><span class="line">    uchar ReadData = PINB ^ <span class="number">0xff</span>;</span><br><span class="line">    uchar new_trg = ReadData &amp; (ReadData ^ cont);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (key_state) &#123;</span><br><span class="line">        <span class="keyword">case</span> KEY_STATE_IDLE:</span><br><span class="line">            <span class="keyword">if</span> (new_trg != <span class="number">0</span>) &#123; <span class="comment">// 检测到按键变化</span></span><br><span class="line">                key_state = KEY_STATE_PRESSED;</span><br><span class="line">                debounce_timer = DEBOUNCE_TIME;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> KEY_STATE_PRESSED:</span><br><span class="line">            <span class="keyword">if</span> (debounce_timer &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                debounce_timer --;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ReadData == (PINB ^ <span class="number">0xff</span>)) &#123; <span class="comment">// 确认按键状态</span></span><br><span class="line">                    trg = new_trg;</span><br><span class="line">                    cont = ReadData;</span><br><span class="line">    <span class="keyword">if</span>(trg &amp;&amp; cont)&#123;</span><br><span class="line"><span class="comment">/*写单击逻辑*/</span></span><br><span class="line">    &#125;</span><br><span class="line">                    key_state = KEY_STATE_RELEASED;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    key_state = KEY_STATE_IDLE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> KEY_STATE_RELEASED:</span><br><span class="line">            <span class="keyword">if</span> (new_trg == <span class="number">0</span>) &#123; <span class="comment">// 等待按键释放</span></span><br><span class="line">                key_state = KEY_STATE_IDLE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">三行代码即可实现按键的长短按检测。</summary>
    
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="程序架构" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="程序架构" scheme="https://blog.godmao.top/Tags/%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/"/>
    
    <category term="按键检测" scheme="https://blog.godmao.top/Tags/%E6%8C%89%E9%94%AE%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式模块化设计中的数据共享优化方案</title>
    <link href="https://blog.godmao.top/posts/58440/"/>
    <id>https://blog.godmao.top/posts/58440/</id>
    <published>2025-03-22T04:33:52.000Z</published>
    <updated>2025-03-22T07:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章为博主原创文章。遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><h2 id="问题的提出"><a class="markdownIt-Anchor" href="#问题的提出"></a> 问题的提出</h2><p>在嵌入式项目中，模块化每个功能有利于管理和理清开发思路，但是，当我们需要将模块联动起来的时候，需要一些必要的变量以实现两个模块之间的互相配合，最常见的方法是使用全局变量，但这样做使模块间耦合性<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>大大提高了。</p><h2 id="有什么更好的方案吗"><a class="markdownIt-Anchor" href="#有什么更好的方案吗"></a> 有什么更好的方案吗</h2><p>有的兄弟有的。只不过要牺牲一些效率（需要通过接口访问）。我们可以为共享变量建立一个专门的.c/.h文件，例如<code>SharedData.c/.h</code>。<br />这个文件集中管理模块间的共享变量。这样做结构清晰，每个模块<strong>只依赖 <code>SharedData.h</code>，而不是彼此依赖</strong>\ <br />同时我们通过两种方法使需要访问变量的模块成功读取或修改变量：</p><ul><li>结构体封装+指针传递</li><li>通过函数提供读取和修改的接口</li></ul><h2 id="结构体封装指针传递"><a class="markdownIt-Anchor" href="#结构体封装指针传递"></a> 结构体封装+指针传递</h2><p>:::recommend</p><ul><li>共享变量较多时非常好用。</li><li><strong>隐藏全局变量</strong>，外部模块无法直接访问共享数据而是通过指针，安全性高。</li><li>更好扩展。</li><li>方便，无需为每个变量都写函数接口以提供修改与读取。</li><li><strong>访问速度快</strong>。</li></ul><p>:::</p><h3 id="h文件"><a class="markdownIt-Anchor" href="#h文件"></a> .h文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SHARED_DATA_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHARED_DATA_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> sensor_value;</span><br><span class="line">    <span class="type">int</span> motor_speed;</span><br><span class="line">&#125; SharedData;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只提供获取指针的接口，而不是直接暴露变量</span></span><br><span class="line">SharedData* <span class="title function_">get_shared_data</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="c文件"><a class="markdownIt-Anchor" href="#c文件"></a> .c文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;shared_data.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> SharedData system_data = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;; <span class="comment">// 只在本文件可见</span></span><br><span class="line"></span><br><span class="line">SharedData* <span class="title function_">get_shared_data</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;system_data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在其他模块中使用"><a class="markdownIt-Anchor" href="#在其他模块中使用"></a> 在其他模块中使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;shared_data.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">moduleA_update</span><span class="params">()</span> &#123;</span><br><span class="line">    SharedData *data = get_shared_data();</span><br><span class="line">    data-&gt;sensor_value += <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:::warning</p><p>不推荐将<strong>接收共享变量的指针的变量</strong>定义为全局变量。尽管这样会方便一些。<strong>指针可能被多个模块修改</strong>，导致指向无效地址（增加 bug 风险）。推荐在每个函数内部通过接口访问变量。如果一定要这样做，请一定避免空指针（记住初始化指针）</p><p>:::</p><p>使用全局指针示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> SharedData *data;  <span class="comment">// 仅限当前文件访问</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">moduleA_init</span><span class="params">()</span> &#123;</span><br><span class="line">    data = get_shared_data();<span class="comment">//避免空指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过函数提供读取和修改的接口"><a class="markdownIt-Anchor" href="#通过函数提供读取和修改的接口"></a> 通过函数提供读取和修改的接口</h2><p>:::recommend</p><ul><li><strong>灵活访问变量。你可以严格控制对数据的访问，如只读、避免非法值写入等；同时也可以自定义访问方法，如按位读取。非常的好用。</strong></li><li>可扩展性强。</li></ul><p>:::</p><p>:::error</p><ul><li>代码冗长，调用花销稍大。</li><li>变量太多时需要为每个变量都写接口，太麻烦。所以才要和上面的方法联合起来使用，只为必要的变量编写接口，其余通过第一种方法访问。</li></ul><p>:::</p><h3 id="h文件-2"><a class="markdownIt-Anchor" href="#h文件-2"></a> .h文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SHARED_DATA_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHARED_DATA_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setSensorValue</span><span class="params">(<span class="type">int</span> value)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getSensorValue</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setMotorSpeed</span><span class="params">(<span class="type">int</span> speed)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getMotorSpeed</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="c文件-2"><a class="markdownIt-Anchor" href="#c文件-2"></a> .c文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;shared_data.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> sensor_value = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> motor_speed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setSensorValue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &gt;= <span class="number">0</span>) &#123;  <span class="comment">// 限制非法值</span></span><br><span class="line">        sensor_value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getSensorValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sensor_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setMotorSpeed</span><span class="params">(<span class="type">int</span> speed)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (speed &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        motor_speed = speed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getMotorSpeed</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> motor_speed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在其他模块中使用-2"><a class="markdownIt-Anchor" href="#在其他模块中使用-2"></a> 在其他模块中使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;shared_data.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">moduleA_update</span><span class="params">()</span> &#123;</span><br><span class="line">    setSensorValue(getSensorValue() + <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="联合起来"><a class="markdownIt-Anchor" href="#联合起来"></a> 联合起来</h2><p>将两种方式联合起来使用——大部分变量，我们使用指针接口访问即可；如果有些变量需要一些个性化要求，我们为这些变量编写定制的接口就好。</p><h2 id="挖坑"><a class="markdownIt-Anchor" href="#挖坑"></a> 挖坑</h2><p>降低耦合性的方法还有使用单例模式，以及RTOS中的消息/事件机制。后续研究。</p><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>代码耦合性（Coupling）是指模块或组件之间的依赖程度。如果代码耦合性很高，模块之间会紧密依赖，导致代码难以维护、扩展和测试。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">避免模块间公共变量导致耦合性提高。</summary>
    
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="程序架构" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/Tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="程序架构" scheme="https://blog.godmao.top/Tags/%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/"/>
    
    <category term="降低耦合" scheme="https://blog.godmao.top/Tags/%E9%99%8D%E4%BD%8E%E8%80%A6%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>串口重定向的非阻塞方法</title>
    <link href="https://blog.godmao.top/posts/18285/"/>
    <id>https://blog.godmao.top/posts/18285/</id>
    <published>2025-03-17T14:10:17.000Z</published>
    <updated>2025-03-17T15:03:10.000Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><h2 id="常用方式"><a class="markdownIt-Anchor" href="#常用方式"></a> 常用方式</h2><p>有时我们需要串口打印信息到上位机，最便捷的方法是重定向 <code>printf()</code>，网上的常用方法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span>&#123;    </span><br><span class="line">HAL_UART_Transmit(&amp;huart1, (<span class="type">uint8_t</span> *)&amp;ch, <span class="number">1</span>, <span class="number">0xffff</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> ch;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">(FILE *f)</span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="type">uint8_t</span> ch = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">HAL_UART_Receive(&amp;huart1, &amp;ch, <span class="number">1</span>, <span class="number">0xffff</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> ch;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="这样做的缺点"><a class="markdownIt-Anchor" href="#这样做的缺点"></a> 这样做的缺点</h3><ul><li>这是 <strong>阻塞模式</strong>，每次 <code>printf()</code> 都要等待数据发送完毕，影响 CPU 执行效率。</li><li>如果数据较多，会降低实时性，阻塞主循环。</li></ul><h2 id="使用非阻塞的方式灵活运用dma"><a class="markdownIt-Anchor" href="#使用非阻塞的方式灵活运用dma"></a> 使用非阻塞的方式：灵活运用DMA</h2><p>我们使用DMA非阻塞发送。具体步骤如下：</p><h3 id="1-定义缓冲区"><a class="markdownIt-Anchor" href="#1-定义缓冲区"></a> 1. 定义缓冲区。</h3><p>根据fputc()的特性（这里先按下不表），使用 DMA 发送时，<code>printf()</code> 需要先把数据存到 <strong>一个缓冲区</strong>，然后一次性使用 DMA 发送出去。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TX_BUFFER_SIZE 256  <span class="comment">// 发送缓冲区大小</span></span></span><br><span class="line"><span class="type">uint8_t</span> uart_tx_buffer[TX_BUFFER_SIZE];  <span class="comment">// 串口发送缓冲区</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">uint16_t</span> tx_len = <span class="number">0</span>;  <span class="comment">// 当前缓冲区数据长度</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">uint8_t</span> tx_busy = <span class="number">0</span>;  <span class="comment">// 发送状态标志</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-重定向-fputc使用缓冲区"><a class="markdownIt-Anchor" href="#2-重定向-fputc使用缓冲区"></a> 2. 重定向 <code>fputc()</code>，使用缓冲区</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 确保缓冲区不会溢出</span></span><br><span class="line">    <span class="keyword">if</span> (tx_len &lt; TX_BUFFER_SIZE - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        uart_tx_buffer[tx_len++] = (<span class="type">uint8_t</span>)ch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果遇到换行符，或者缓冲区接近满，就启动 DMA 发送</span></span><br><span class="line">    <span class="comment">// 注意咯，如果缓冲区没满的情况下，只有检测到/n才会触发DMA的发送。所以在缓</span></span><br><span class="line">    <span class="comment">// 冲区没满的情况下，如果你想要发送字符串&quot;abc&quot;，printf(&quot;abc&quot;)是没用的，</span></span><br><span class="line">    <span class="comment">// printf(&quot;abc\n&quot;)才有用哦。</span></span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span> || tx_len &gt;= TX_BUFFER_SIZE - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        uart_dma_transmit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-定义dma-发送函数"><a class="markdownIt-Anchor" href="#3-定义dma-发送函数"></a> 3. 定义DMA 发送函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">uart_dma_transmit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果 DMA 还在忙，则不启动新的传输</span></span><br><span class="line">    <span class="keyword">if</span> (tx_busy) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    tx_busy = <span class="number">1</span>;  <span class="comment">// 标记为发送中</span></span><br><span class="line">    HAL_UART_Transmit_DMA(&amp;huart1, uart_tx_buffer, tx_len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-dma-传输完成回调"><a class="markdownIt-Anchor" href="#4-dma-传输完成回调"></a> 4. DMA 传输完成回调</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_TxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (huart-&gt;Instance == USART1)  <span class="comment">// 确保是目标串口</span></span><br><span class="line">    &#123;</span><br><span class="line">        tx_len = <span class="number">0</span>;  <span class="comment">// 清空缓冲区</span></span><br><span class="line">        tx_busy = <span class="number">0</span>; <span class="comment">// 标记为可用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="一些疑惑的解答"><a class="markdownIt-Anchor" href="#一些疑惑的解答"></a> 一些疑惑的解答</h2><p>Q: 茂神茂神，你的说的非阻塞方式的确很不错，但是还是太吃操作了，我就不能直接在 <code>fputc()</code>里写 <code>HAL_UART_Transmit_DMA</code>吗？<br /><br />A: 可以的兄弟可以的。<code>fputc()</code> 是发送一个字符对吧，理论上我们只需要把DMA传输的字节数改为1就行了对吧？nonono，首先DMA是非阻塞的对吧，也就是激活了它，他就只管发，不管你完没完成，你都可以再次激活它，如果像你这样做，当发送字符流时大概率是这种情况：</p><blockquote><p><code>fputc()</code>打电话给DMA的秘书说我要发这个字符，然后他就认为我已经给DMA说了叫它发送这个字符啦，所以这个字符就发出去啦，剩下就不关我的事啦。结果DMA秘书看到DMA此时还在忙于上次发送，于是判断DMA为<code>HAL_BUSY</code>没有办法把字符交给DMA。这个字符信息就丢失了。。。。</p></blockquote>]]></content>
    
    
    <summary type="html">关于串口重定向的非阻塞方法的介绍。</summary>
    
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="程序架构" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="STM32" scheme="https://blog.godmao.top/Tags/STM32/"/>
    
    <category term="嵌入式" scheme="https://blog.godmao.top/Tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="程序架构" scheme="https://blog.godmao.top/Tags/%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/"/>
    
    <category term="串口" scheme="https://blog.godmao.top/Tags/%E4%B8%B2%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>CubeMX配置功能系列：iic</title>
    <link href="https://blog.godmao.top/posts/58129/"/>
    <id>https://blog.godmao.top/posts/58129/</id>
    <published>2025-03-12T06:42:40.000Z</published>
    <updated>2025-03-12T13:22:24.000Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章为博主原创文章。遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>由于前面已经详细介绍了iic通信协议（详见<a href="https://im.godmao.top/posts/55329/">通信协议：iic [ g0dMa0’s Blog ]</a>），这里主要就硬件iic在cubemx中的配置作介绍。</p><h2 id="通道设置"><a class="markdownIt-Anchor" href="#通道设置"></a> 通道设置</h2><p><img src="Snipaste_2025-03-12_14-59-01.png" alt="" /><br />哈哈没想到吧，iic通道不止支持iic协议，孩子。<br />SMBus-系统管理总线，是iic的扩展。利用系统管理总线，设备可提供制造商信息，告诉系统它的型号/部件号，保存暂停事件的状态，报告不同类型的错误，接收控制参数，和返回它的状态。SMBus为系统和电源管理相关的任务提供控制总线。<br />SMBus 为系统和电源管理这样的任务提供了一条控制总线，使用 SMBus 的系统，设备之间发送和接收消息都是通过 SMBus，而不是使用单独的控制线，这样可以节省设备的管脚数。\ <br />所以它与iic的区别很明显了，一个是该总线上连接设备自身可以控制总线(I2C，速率较高)，想干嘛就干嘛；另一个是设备之间可以通过它来传送信息，但是速率比较慢，比如用在检测各元件状态并更新硬件设置引脚等，同时廉价是它的优点。<br /><br /><strong>SMBus-Alert</strong>是一个带中断线的可选信号，用于那些希望扩展他们的控制能力而牺牲一个引脚的设备。SMBALERT和SCL和SDA信号一样，是一种线与信号。SMBALERT通常和SMBus广播呼叫地址一起使用。与SMBus有关的消息为2字节。<strong>单一的从设备可以通过SMBALERT发信号给主机表示它希望进行通信</strong>，这可通过设置I2C_CR1寄存器上的ALERT位实现。主机处理该中断并通过提醒响应地址ARA(Alert Response Address，地址值为0001100x)访问所有SMBALERT设备。只有那些将SMBALERT拉低的设备能应答ARA。此状态是由 I2C_SR1寄存器中的SMBALERT状态标记来标识的。主机执行一个修改过的接收字节操作。由从发送设备提供的7位设备地址被放在字节的7个最高位上，第八个位可以是0或1。如果多个设备把SMBALERT拉低，最高优先级设备(最小的地址)将在地址传输期间通过标准仲裁赢得通信权。在确认从地址后，此设备不得再拉低它的SMBALERT，如果当信息传输完成后，主机仍看到SMBALERT低，就知道需要再次读ARA。没有执行SMBALERT信号的主机可以定期访问ARA。有关SMBus提醒模式的更多详细资料，请参考2.0版的SMBus规范。<strong>说白了还是通信，只不过是从机与从机的通信</strong> <br />我先忽略系统管理总线协议。专注于iic。</p><h2 id="主模式设置"><a class="markdownIt-Anchor" href="#主模式设置"></a> 主模式设置</h2><p><img src="Snipaste_2025-03-12_17-56-13.png" alt="" /></p><h3 id="custom-timing"><a class="markdownIt-Anchor" href="#custom-timing"></a> Custom Timing</h3><p>这个牛逼了，iiC通信依赖于特定的时序参数，如时钟频率、高低电平时间等。STM32CubeMX通常提供预定义的时序配置，适用于常见场景。但在某些情况下，预定义配置可能无法满足需求，这时就需要手动调整时序参数。</p><p>通过“Custom Timing”，你可以根据具体需求调整以下参数：</p><ol><li><strong>SCL时钟频率</strong>：设置SCL时钟的频率。</li><li><strong>SCL高低电平时间</strong>：分别设置SCL高电平和低电平的持续时间。</li><li><strong>数据建立和保持时间</strong>：设置数据在时钟边沿前后的稳定时间。</li><li><strong>起始和停止条件时间</strong>：设置起始和停止条件的持续时间。</li></ol><h4 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h4><ul><li><strong>非标准I2C设备</strong>：某些设备可能需要特定的时序。</li><li><strong>优化性能</strong>：在高噪声环境中，调整时序可以提高通信稳定性。</li><li><strong>调试</strong>：在调试时，手动调整时序有助于排查问题。</li></ul><h4 id="配置步骤"><a class="markdownIt-Anchor" href="#配置步骤"></a> 配置步骤</h4><ol><li>在CubeMX中启用I2C外设。</li><li>选择“Custom Timing”选项。</li><li>手动输入所需的时序参数。</li><li>生成代码并验证配置。</li></ol><h4 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h4><ul><li>确保时序参数符合I2C规范和设备要求。</li><li>错误的配置可能导致通信失败或损坏设备。<br />通过“Custom Timing”，你可以更灵活地配置I2C通信，满足特定需求。</li></ul><h4 id="看完以后发现我还是不会用啊"><a class="markdownIt-Anchor" href="#看完以后发现我还是不会用啊"></a> 看完以后发现我还是不会用啊，，，，，</h4><h3 id="timing"><a class="markdownIt-Anchor" href="#timing"></a> Timing</h3><p>这个是和上面那个一起用的，我猜是把Timing这个设定值写入某个寄存器里，然后这个寄存器的不同位控制着不同的时序参数，如高低电平时间什么的。没有深究。因为估计也不会用自定义时序。<br /><img src="Snipaste_2025-03-12_18-39-27.png" alt="" /><br />自定义时序enable 后的界面如上图所示。</p><h3 id="risetimefalltimecoefficient-of-digital-filter"><a class="markdownIt-Anchor" href="#risetimefalltimecoefficient-of-digital-filter"></a> RiseTime/FallTime/Coefficient of Digital Filter</h3><p>控制iic上升沿/下降沿的时间，iic对于上下降沿的时间是有要求的。<br />数字滤波器系数。不启用设置为0，启用则可设置为1-15，表示1-15个iic外设时钟。<br />这三个参数要遵循一套非常复杂的时序计算方法的，也和对应的外设有关系，在设置前也要阅读相关的外设资料。此处暂且不展开。</p><h3 id="analog-filter"><a class="markdownIt-Anchor" href="#analog-filter"></a> Analog Filter</h3><p>模拟滤波器。</p><h2 id="从模式设置"><a class="markdownIt-Anchor" href="#从模式设置"></a> 从模式设置</h2><h3 id="clock-no-stretch-mode"><a class="markdownIt-Anchor" href="#clock-no-stretch-mode"></a> Clock No Stretch Mode</h3><p><strong>IIC时钟拉伸(Clock stretching)</strong>：<br />有时候低速从机可能由于上一个请求还没处理完，无法继续接收主机的后续请求，<strong>即主机的数据传输速率超过了从机的处理能力</strong>。这种情况下，从机可以进行时钟拉伸来要求主机暂停传输数据 。通常时钟都是由主机提供的，从机只是在SDA上读数据或者发数据。<br />时钟拉伸则是从机在主机释放SCL后，将SCL主动拉低并保持，此时要求主机停止在SCL上产生脉冲以及在SDA上发送数据，直到从机释放SCL（SCL为高电平）。之后主机便可以继续正常的数据传输了。可见时钟拉伸实际上是利用了时钟同步的机制，只是时钟由从机产生。 如果系统中存在这种低速从机并且从机实现了时钟拉伸，主机必须能够处理这种情况，<strong>实际上大部分从机设备中不包含SCL驱动器的，因此无法拉伸时钟。</strong></p><h3 id="primary-address-length-selection"><a class="markdownIt-Anchor" href="#primary-address-length-selection"></a> Primary Address Length selection</h3><p>从设备地址长度 置从设备的地址是7bit还是10bit。大部分为7bit。</p><h3 id="general-call-address"><a class="markdownIt-Anchor" href="#general-call-address"></a> General call address</h3><p><strong>通用广播地址是为了寻址总线上所有设备。</strong> 如果一个设备不需要使用广播功能，可以不响应广播。如果设备需要使用广播功能，则它在检测到广播地址后发送响应，并作为从机接收读取总线上发送的数据。主机不知道总线上有多少从机发送响应。<strong>总线上所有可以响应广播的从机读取广播地址后的第二个及后面的字节。</strong> 不能处理这些广播数据的从机通过不发送响应的方式忽略它。同样地，<strong>如果有一个或一个以上的从机发送响应，则主机就检测不到总线上其它没有响应的设备。</strong> 广播消息的含义总是定义在第二个字节。<br /><img src="65d333b522f92fae6584d6d5cccc4de9.jpeg" alt="" /></p><details><summary>以下内容需要的时候再看</summary><p>有两种可能情况：</p><ul><li><p>最低位“B”为0</p></li><li><p>最低位“B”为1</p></li><li><p>“B”为0，第二个字节包括以下定义：<br />0000 0110（06h）：复位并通过硬件写内容到从机的可编程部分。所有可以响应此类广播的从机，收到此两字节后，进行复位并进入它们地址的可编程部分。注意确保设备在加电后不会将SDA或SCL拉低，因为这些低电平会阻塞总线；<br />0000 0100（04h）：通过硬件写内容到从机的可编程部分，作用类似（06h），但设备不会复位；<br />0000 0000（00h）：这个不应该作为第二个字节用。<br />编程时序参考相应设备的DATASHEET。\</p></li><li><p>“B”为1，两字节广播定义为“硬件广播”。主机在编程后，可以发送既定的从机地址到总线上，构成两字节序列的“硬件广播”。主机可能并不知道总线上从机的地址，它只能通过硬件广播的方式，将自身地址通知给系统。<br />硬件广播的第二个字节的前七位包括主机的地址。总线上的智能设备如微控制器，读取此地址并接收主机发送的其它信息。如果主机也可以作为从机使用，则以上读取的主机地址实际上也就是（切换主从模式后的）从机地址。在系统中，一种可能是系统复位后设备由主机发送模式切换到从机接收模式，这时由系统主机先告诉硬件主机数据应送往的从机地址，这样当硬件主机发送数据时就可以直接向指定从机（地址）发送数据了。<br />如下所示：</p></li></ul></details><p><img src="e76a7cecc118d861220014786be3e39b.jpeg" alt="" /></p><h3 id="dual-address-acknowledged"><a class="markdownIt-Anchor" href="#dual-address-acknowledged"></a> Dual Address Acknowledged</h3><p>双地址确认。允许从机响应两个不同的地址。有啥用？？？？</p><h3 id="primary-slave-address"><a class="markdownIt-Anchor" href="#primary-slave-address"></a> Primary slave address</h3><p>从设备初始地址。不用填。</p><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li>⭐⭐⭐<a href="https://blog.csdn.net/sternlycore/article/details/85759475">I2C详解（二）_i2c general call-CSDN博客</a>遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议</li><li><a href="https://blog.csdn.net/yangguoyu8023/article/details/71440688">IIC设备驱动程序（六）————SMBus协议-CSDN博客</a></li><li><a href="https://shequ.stmicroelectronics.cn/thread-571931-1-1.html">【STM32F030开发日志/评测/笔记】+（1）STM32F0处理器I2C时间配… - STM32团队 ST意法半导体中文论坛</a></li><li>⭐⭐⭐<a href="https://blog.csdn.net/as480133937/article/details/105259075">【STM32】HAL库 STM32CubeMX教程十二—IIC(读取AT24C02 )_hal iic-CSDN博客</a></li></ul>]]></content>
    
    
    <summary type="html">硬件iic在cubemx中的配置。</summary>
    
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="CubeMX配置功能" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/CubeMX%E9%85%8D%E7%BD%AE%E5%8A%9F%E8%83%BD/"/>
    
    
    <category term="STM32" scheme="https://blog.godmao.top/Tags/STM32/"/>
    
    <category term="CubeMX" scheme="https://blog.godmao.top/Tags/CubeMX/"/>
    
    <category term="嵌入式" scheme="https://blog.godmao.top/Tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="iic" scheme="https://blog.godmao.top/Tags/iic/"/>
    
  </entry>
  
  <entry>
    <title>通信协议：iic</title>
    <link href="https://blog.godmao.top/posts/55329/"/>
    <id>https://blog.godmao.top/posts/55329/</id>
    <published>2025-03-10T14:06:55.000Z</published>
    <updated>2025-03-14T12:54:30.000Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>iic作为当今嵌入式应用中最常见的串行通信协议之一<span class="spoiler">我愿将其与UART和SPI并称三幻神</span>，是对于嵌入式开发者是最基本的要求，因为老是会忘记iic协议的一些细节，故作记录。</p><h2 id="iic简介"><a class="markdownIt-Anchor" href="#iic简介"></a> iic简介</h2><p><strong>IIC(Inter－Integrated Circuit)总线</strong>是一种由NXP（原PHILIPS）公司开发的两线式串行总线，用于连接微控制器及其外围设备。<strong>是一种半双工同步的低速通信协议</strong>。多用于主控制器和从器件间的主从通信，在小数据量场合使用，传输距离短，任意时刻只能有一个主机等特性。<br /><br />IC使用两根信号线进行通信：一根时钟线SCL，一根数据线SDA。IIC将SCL处于高时SDA拉低的动作作为开始信号，SCL处于高时SDA拉高的动作作为结束信号；传输数据时，SDA在SCL低电平时改变数据，在SCL高电平时保持数据，每个SCL脉冲的高电平传递1位数据。</p><h2 id="主要特性"><a class="markdownIt-Anchor" href="#主要特性"></a> 主要特性</h2><ul><li>IC用2根信号线通信：串行数据线 SDA、串行时钟线 SCL；</li><li>IIC总线上所有器件的SDA、SCL引脚输出驱动都为<strong>开漏(OD) 结构</strong>，通过外接上拉电阻实现总线上所有节点SDA、SCL信号的线与逻辑关系；</li><li>总线上的所有设备通过软件寻址且具有唯一的地址（7位或10位）。7位“从机专用地址码”，其高4位为由生产厂家制定的设备类型地址，低3位为器件引脚定义地址（由使用者定义）；10位地址不常见；</li><li>任何时刻都只存在简单的主从关系，按数据传输的方向，主机可以是主发送器或主接收器；</li><li>支持多主机。在总线上存在多个主机时，通过冲突检测和仲裁机制防止多个主机同时发起数据传输时存在的冲突；</li><li>IIC总线上所有器件都具有“自动应答”功能，保证数据传输的正确性； <strong>主机和从机的区别在于对SCL的发送权，只有主机才能发送SCL</strong>；</li><li>IIC总线允许挂载最多的设备数量取决于总线上最大电容值，一般为400pf（Hs模式100pf）</li></ul><p>支持的传输速率：</p><table><thead><tr><th>模式</th><th>速度</th></tr></thead><tbody><tr><td>标准模式（Standard Mode）</td><td>100kb/s</td></tr><tr><td>快速模式（Fast Mode）</td><td>400kb/s</td></tr><tr><td>增强快速模式（Fast Mode Plus）</td><td>1Mb/s</td></tr><tr><td>高速模式（High Speed Mode）</td><td>3.4Mb/s</td></tr><tr><td>极速模式（Ultra-FastMode）</td><td>5Mb/s</td></tr></tbody></table><h2 id="硬件结构"><a class="markdownIt-Anchor" href="#硬件结构"></a> 硬件结构</h2><h3 id="总线结构"><a class="markdownIt-Anchor" href="#总线结构"></a> 总线结构</h3><p>IIC使用两根信号线进行通信，要求两根线都使用 <strong>开漏输出接上拉电阻</strong> 的配置，以此实现总线上所有节点SDA、SCL信号的<strong>线与</strong>逻辑关系。<br />Rp电阻的取值有一定的要求，太小会导致灌入电流过大，使’低’数据不稳定，甚至损坏端口；太大会导致信号上升缓慢，使得数据传输出错。在不同应用场景及供电电压下有不同的取值要求。<br /><img src="79b9189018381624841758e3ade6e477.png" alt="" /></p><h3 id="仲裁机制"><a class="markdownIt-Anchor" href="#仲裁机制"></a> 仲裁机制</h3><h4 id="开漏输出"><a class="markdownIt-Anchor" href="#开漏输出"></a> 开漏输出</h4><p>开漏输出回顾：当输入为高电平时，三级管导通，输出为低电平。输入为低电平，输出不确定，在这种情况下，如果使用强上拉，则可以输出高电平。开漏输出是实现”线与“的一种方案。</p><h4 id="线与"><a class="markdownIt-Anchor" href="#线与"></a> 线与</h4><p>多个开漏输出连接在一起时，只要有一个输入为低电平，那么总体表现为低电平（处于低电平的那个io口把vdd流向Vout的电流引走了）。<br /><img src="Snipaste_2025-03-11_20-01-18.png" alt="" /></p><p>“线与“使得总线上不会出现数据冲突，实现了总线的仲裁控制。总线的控制权会交给最后一个输出低电平的设备，其它设备（输出高）通过检测总线上的电平状态（状态低），对比与自己输出状态不一致，则自动退出对总线的控制请求，从而防止了总线上的数据冲突。</p><h2 id="时序逻辑"><a class="markdownIt-Anchor" href="#时序逻辑"></a> 🌟时序逻辑</h2><h3 id="数据有效性"><a class="markdownIt-Anchor" href="#数据有效性"></a> 数据有效性</h3><p>scl为高电平期间，为数据采集期，所以sda上的数据此时一定要保持稳定哦~<br /><img src="6c89c55012485f151df1a9fb48843d3f.jpeg" alt="" /></p><h3 id="开始与结束信号"><a class="markdownIt-Anchor" href="#开始与结束信号"></a> 开始与结束信号</h3><p>有设备想要sda总线控制权时，会主动把sda拉低。平时sda为高。</p><ul><li><strong>开始信号（START/S）：</strong> <strong>SCL为高时</strong>，SDA从高到低的跳变产生开始信号 。</li><li><strong>结束信号（STOP/P）  ：</strong> <strong>SCL为高时</strong>，SDA从低到高的跳变产生结束信号。</li><li><strong>重复开始信号（ReSTART/Sr）：</strong> 在结束时不给出STOP信号，而以一个时钟周期内再次给出开始信号作为替代。<br /><img src="f749a6ab4f928522a99db173fd504647.png" alt="" /></li></ul><h3 id="传输格式字节格式"><a class="markdownIt-Anchor" href="#传输格式字节格式"></a> 传输格式（字节格式）</h3><p>SDA数据线上的每个字节<strong>必须是8位</strong>，对于每次传输的<strong>字节数没有限制</strong>。每个字节（8位）数据传送完后紧跟着应答信号（ACK，第9位）。数据的先后顺序为：<strong>高位在前</strong> 。<br /><img src="d3bbca378362c28829cee243a8497ef7.png" alt="" /></p><h3 id="ack信号"><a class="markdownIt-Anchor" href="#ack信号"></a> ACK信号</h3><p>协议规定数据传输过程必须包含应答（ACK）。接收器通过应答告知发送的字节已被成功接收，之后发送器可以进行下一个字节的传输。所以主机产生数据传输过程用了9个时钟。发送器在应答时钟周期内释放对SDA总线的控制，这样 <strong>接收器</strong> 可以通过将SDA线拉低告知发送器：数据已被成功接收。(谁接收，谁发送应答信号)<span class="spoiler">发送端对接收端说：我他妈要给你发数据了，收到货他妈回复一下0</span><br />应答信号分为两种：</p><ol><li>当第9位(应答位)为 <strong>低电平</strong> 时，为 <strong>ACK</strong>  （Acknowledge）   信号</li><li>当第9位(应答位)为 <strong>高电平</strong> 时，为 <strong>NACK</strong>（Not Acknowledge）信号</li></ol><p>主机发送数据，从机接收时，ACK信号由从机发出。当在SCL第9位时钟高电平信号期间，如果SDA仍然保持高电平，则主机可以直接产生STOP条件终止以后的传输或者继续ReSTART开始一个新的传输 <span class="spoiler">此时主机发现事情不对，我他妈辛辛苦苦给你发的货你连句回应都没有，主机可以选择不发了，或者继续用爱发电发发发 大声发！来财，来~我是憋佬仔</span><br /><br />从机发送数据，主机读取数据时，ACK信号由主机给出。主机响应ACK表示还需要再接收数据，而当主机接收完想要的数据后，通过发送NACK告诉从机读取数据结束、释放总线。随后主机发送STOP命令，将总线释放，结束读操作。<span class="spoiler">从机这个fw，纯添狗级别的、麦当劳级别的、ATM级别的。主机叫一直叫从机爆金币，从机真就一直爆，榨干从机了就直接把他甩了他妈的</span></p><h3 id="7bit完整传输示意图"><a class="markdownIt-Anchor" href="#7bit完整传输示意图"></a> 7bit完整传输示意图</h3><p><img src="f313f22e0c7bc962ff6e9e5afc2bbc95.png" alt="" /></p><p>没错前7位是地址，发完地址发送读/写命令，然后发送端交出sda控制权，等待接收端的应答信号。如果从机没有给出ACK应答，则说明接收设备可能没有收到数据（如寻址的设备不存在或是设备正在忙碌）或无法解析收到的数据，如果是这样，则由master来决定如何处理（STOP或ReSTART）。</p><h3 id="从机发主机收的情况"><a class="markdownIt-Anchor" href="#从机发主机收的情况"></a> 从机发，主机收的情况</h3><p>主机对向从机读取数据时，方式同发送数据有所不同，要多一次通信过程。<br />主机需要先向从机发送一次信号，告诉从机”我要读取数据“，然后<strong>重开一次通信</strong><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，等待从机主动返回数据。<br /><img src="Snipaste_2025-03-11_20-50-32.png" alt="" /></p><h3 id="10bit传输"><a class="markdownIt-Anchor" href="#10bit传输"></a> 10bit传输</h3><p>随着IIC设备日益增多，7位的从机地址逐渐不能满足使用，于是从机地址从7位扩充到了10位。7位和10位地址的设备可以共存于同一个I2C总线系统互不冲突，展现了良好的兼容性。<br />10-bit 地址的IIC设备需要 2-Byte 来传输从设备地址信息，所以采用了这样的设计：第一个字节为 11110 + 地址高两位(第10、9bit) + 读写控制位，第二个字节为从设备地址低8位，除此之外与7-bit设备相同。（因为 “1111 0xx” 为 IIC 中特地保留的16个特殊指令地址中的一个，所以7-bit设备不会响应该首字节的呼叫，只有10-bit设备会响应，从而实现良好兼容。<span class="spoiler">好样的，iic👍👍👍为你骄傲</span>）<br />直接贴图了<br />写<br /><img src="5569e1d0e47921103fe2d9d5b8ce83f9.jpeg" alt="" /><br />读<br /><img src="dee04bba6b887b740ab122eac9bc37bf.jpeg" alt="" /><br />注意第一帧都是write哦。</p><h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章</h2><ul><li>⭐⭐⭐<a href="https://blog.csdn.net/qq_39829913/article/details/104718185">基础通信协议之 IIC (I2C) 详细讲解_i2c通信的详细讲解-CSDN博客</a>遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议</li><li><a href="https://www.cnblogs.com/yuanqiangfei/p/15781416.html">二十、I2C总线仲裁机制 - 轻轻的吻 - 博客园</a></li><li><a href="https://zhuanlan.zhihu.com/p/638360051">GPIO推挽与开漏输出的“线与“特性 - 知乎</a></li></ul><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>重复启动信号（Repeated Start）是一种特殊的操作，<strong>它允许在不释放总线的情况下从写模式切换到读模式</strong>。这种方式可以避免总线被其他设备占用，或者防止主设备发送 STOP 信号后，其他设备试图接管总线。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">本篇讲解了iic通信协议。</summary>
    
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="通信协议" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/Tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="iic" scheme="https://blog.godmao.top/Tags/iic/"/>
    
    <category term="通信协议" scheme="https://blog.godmao.top/Tags/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>CubeMX配置功能系列：ADC（下）</title>
    <link href="https://blog.godmao.top/posts/55933/"/>
    <id>https://blog.godmao.top/posts/55933/</id>
    <published>2025-03-09T12:01:13.000Z</published>
    <updated>2025-03-12T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#1-%E8%BE%93%E5%85%A5%E6%A8%A1%E5%BC%8F">1. 输入模式</a><ul><li><a href="#11-%E5%8D%95%E7%AB%AF%E8%BE%93%E5%85%A5">1.1. 单端输入</a></li><li><a href="#12-%E5%B7%AE%E5%88%86%E8%BE%93%E5%85%A5">1.2. 差分输入</a></li></ul></li><li><a href="#2-%E7%BB%A7%E7%BB%AD%E7%9C%8Bconfig%E9%83%A8%E5%88%86">2. 继续看config部分</a><ul><li><a href="#21-%E9%80%9A%E7%94%A8%E8%AE%BE%E7%BD%AE%E9%83%A8%E5%88%86">2.1. 通用设置部分：</a></li><li><a href="#22-adc-%E8%AE%BE%E7%BD%AE%E9%83%A8%E5%88%86">2.2. ADC 设置部分：</a><ul><li><a href="#221-clockpre">2.2.1. ClockPre…</a></li><li><a href="#222-resolusion">2.2.2. Resolusion</a></li><li><a href="#223-data-ali">2.2.3. Data Ali…</a></li><li><a href="#224-gain-com">2.2.4. Gain Com…</a></li><li><a href="#225-scan-conversion-mode">2.2.5. Scan Conversion Mode</a></li><li><a href="#226-end-of-conversion-selection">2.2.6. End Of Conversion Selection</a></li><li><a href="#227-low-powerautowait">2.2.7. Low Power Auto Wait</a></li><li><a href="#228-continuous-conversion-mode">2.2.8. Continuous Conversion Mode</a></li><li><a href="#229-discontinuous-conversion-mode">2.2.9. Discontinuous Conversion Mode</a></li><li><a href="#2210-dma-continuous-requests">2.2.10. DMA Continuous Requests</a></li><li><a href="#2211-overrun-behaviour">2.2.11. Overrun behaviour</a></li><li><a href="#2212-conversion-data-managerment-modeh7">2.2.12. Conversion Data Managerment Mode（H7）</a></li></ul></li><li><a href="#23-%E8%A7%84%E5%88%99%E8%BD%AC%E6%8D%A2%E6%A8%A1%E5%BC%8F">2.3. 规则转换模式</a><ul><li><a href="#231-enable-regular-conversions">2.3.1. Enable Regular Conversions</a></li><li><a href="#232-enable-regular-oversamping%E4%B8%8D%E5%B8%B8%E7%94%A8">2.3.2. Enable Regular Oversamping（不常用）</a></li><li><a href="#233-oversamping-right-shift%E4%B8%8D%E5%B8%B8%E7%94%A8">2.3.3. Oversamping Right Shift（不常用）</a></li><li><a href="#234-number-of-conversion">2.3.4. Number Of Conversion</a></li><li><a href="#235-external-trigger-conversion-soure%E8%A7%A6%E5%8F%91%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%A4%96%E9%83%A8%E6%9D%A5%E6%BA%90">2.3.5. External Trigger Conversion Soure（触发转换的外部来源）</a></li><li><a href="#236-external-trigger-conversion-edge%E8%A7%A6%E5%8F%91%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%A4%96%E9%83%A8%E6%B2%BF">2.3.6. External Trigger Conversion Edge（触发转换的外部沿）</a></li><li><a href="#237-rank">2.3.7. Rank</a></li><li><a href="#238-offset-number">2.3.8. Offset Number</a></li></ul></li><li><a href="#24-%E7%84%B6%E5%90%8E%E6%98%AF%E6%B3%A8%E5%85%A5%E8%BD%AC%E6%8D%A2%E6%A8%A1%E5%BC%8F">2.4. 然后是注入转换模式</a><ul><li><a href="#241-%E8%A7%84%E5%88%99%E9%80%9A%E9%81%93">2.4.1. 规则通道：</a></li><li><a href="#242-%E6%B3%A8%E5%85%A5%E9%80%9A%E9%81%93">2.4.2. 注入通道：</a></li></ul></li><li><a href="#25-%E6%9C%80%E5%90%8E%E6%98%AF%E5%8F%AF%E7%88%B1%E7%9A%84%E7%9C%8B%E9%97%A8%E5%B0%8F%E7%8B%97">2.5. 最后是可爱的看门小狗🥰~</a></li></ul></li><li><a href="#3-%E5%8F%82%E8%80%83%E5%87%BD%E6%95%B0">3. 参考函数</a></li><li><a href="#4-%E5%8F%82%E8%80%83%E5%8D%9A%E5%AE%A2">4. 参考博客</a></li></ul><h2 id="1-输入模式"><a class="markdownIt-Anchor" href="#1-输入模式"></a> 1. 输入模式</h2><p>我们打开cubemx的配置，配置通道时有如下选择：分别是差分输入和单端输入。<br /><img src="Snipaste_2025-03-09_19-30-43.png" alt="" /></p><h3 id="11-单端输入"><a class="markdownIt-Anchor" href="#11-单端输入"></a> 1.1. 单端输入</h3><p>单端输入方式优点就是简单，缺点是如果VIN受到干扰，由于GND电位始终是0V，所以最终采样值也会随着干扰而变化。采样值=VIN（叠加干扰值 ）- 0V</p><p>如图所示，单端输入只有一个输入引脚ADCIN，使用公共地GND作为电路的返回端，ADC的采样值=ADCIN电压-GND的电压(0V)。这种输入方式优点就是简单，缺点是如果vin受到干扰，由于GND电位始终是0V，所以最终ADC的采样值也会随着干扰而变化。<br /><img src="8c60645887a08582fd0cd8f9cba6b8da.png" alt="" /></p><h3 id="12-差分输入"><a class="markdownIt-Anchor" href="#12-差分输入"></a> 1.2. 差分输入</h3><p>差分受到的干扰是差不多的，输入的共模干扰，在输入时会被减掉，从而降低了干扰，缺点就是接线复杂一些。</p><p>差分信号 优点：易分辨小信号、抗干扰EMS强；缺点:双线</p><p>而差分输入比单端输入多了一根线，最终的ADC采样值=(ADCIN电压)-(ADCIN-电压)，由于通常这两根差分线会布在一起，所以他们受到的干扰是差不多的，输入共模干扰，在输入ADC时会被减掉，从而降低了干扰，缺点就是接线复杂一些。而且需要VIN+和VIN-两路反相的输入信号。</p><p>差分输入的是将两个输入端的差值作为信号，这样可以免去一些误差，比如你输入一个1V的信号可电源有偏差实际输入要大0.1.就可以用差分输入1V和2V一减就把两端共有的那0.1误差剪掉了。单端输入无法去除这类误差。</p><p><img src="Snipaste_2025-03-09_19-43-28.png" alt="" /></p><h2 id="2-继续看config部分"><a class="markdownIt-Anchor" href="#2-继续看config部分"></a> 2. 继续看config部分</h2><p><img src="Snipaste_2025-03-09_19-45-21.png" alt="" /><br /><img src="Snipaste_2025-03-09_19-45-32.png" alt="" /></p><h3 id="21-通用设置部分"><a class="markdownIt-Anchor" href="#21-通用设置部分"></a> 2.1. 通用设置部分：</h3><ul><li>当只启用1个ADC时，只能选择<strong>独立模式</strong>，如果使用双ADC并要求同步的话，则会有更多选择。双重ADC同步模式，两个ADC同时采集一个或多个通道，可以提高采样率。这个双ADC同步模式的选择先不作记录了！</li></ul><h3 id="22-adc-设置部分"><a class="markdownIt-Anchor" href="#22-adc-设置部分"></a> 2.2. ADC 设置部分：</h3><h4 id="221-clockpre"><a class="markdownIt-Anchor" href="#221-clockpre"></a> 2.2.1. ClockPre…</h4><p>时钟预分频，双时钟域架构。目的是让ADC达到稳定的工作频率<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>（异步时钟模式（Asynchronous clock mode，基于PLL2P时钟）同步时钟模式（Synchronous clock mode，基于AHB时钟）有些型号的单片机则是直接从时钟树专门分出了一个ADC时钟频率配置。<br /><img src="Snipaste_2025-03-09_20-30-53.png" alt="" /></p><h4 id="222-resolusion"><a class="markdownIt-Anchor" href="#222-resolusion"></a> 2.2.2. Resolusion</h4><p>分辨率。不再赘诉。请见上篇</p><h4 id="223-data-ali"><a class="markdownIt-Anchor" href="#223-data-ali"></a> 2.2.3. Data Ali…</h4><p>数据对齐。不再赘诉。请见上篇</p><h4 id="224-gain-com"><a class="markdownIt-Anchor" href="#224-gain-com"></a> 2.2.4. Gain Com…</h4><p>增益补偿：对所有转换后的数据进行增益补偿。每次转换后，数据根据增益补偿对采样后的数据进行变换。</p><h4 id="225-scan-conversion-mode"><a class="markdownIt-Anchor" href="#225-scan-conversion-mode"></a> 2.2.5. Scan Conversion Mode</h4><p>扫描模式。不再赘诉。请见上篇</p><h4 id="226-end-of-conversion-selection"><a class="markdownIt-Anchor" href="#226-end-of-conversion-selection"></a> 2.2.6. End Of Conversion Selection</h4><p>转换结束标志选择：指定转换结束后是否产生EOS中断或单次转换结束事件标志（EOC）。有End of single conversion（EOC） 与 End of sequence of conversion（EOS）两种选择。这两个事件会触发中断与DMA。<br /><br />在多通道转换过程中，如果选择了End of sequence of conversion，会在一组数据转换完成后发出EOS标志，如下图所示。如果不选，则不会置位该标志。<br /><img src="Snipaste_2025-03-09_20-42-09.png" alt="" /><br />选择EOS目的是等所有通道转换完毕后，产生中断后将全部数据取出来，或者使用DMA将全部数据取出来。</p><h4 id="227-low-power-auto-wait"><a class="markdownIt-Anchor" href="#227-low-power-auto-wait"></a> 2.2.7. Low Power Auto Wait</h4><p>低功耗自动延迟等待模式，可选参数为 ENABLE 和 DISABLE，当使能时，仅当一组内所有之前的数据已处理完毕时，才开始新的转换，适用于低频应用。<strong>该模式仅用于 ADC 的轮询模式，不可用于 DMA 以及中断。</strong></p><h4 id="228-continuous-conversion-mode"><a class="markdownIt-Anchor" href="#228-continuous-conversion-mode"></a> 2.2.8. Continuous Conversion Mode</h4><p>是否启用连续转换。不再赘诉。请见上篇 <strong>若想使用ADC+DMA的话，必须先使能连续转换模式</strong>。</p><h4 id="229-discontinuous-conversion-mode"><a class="markdownIt-Anchor" href="#229-discontinuous-conversion-mode"></a> 2.2.9. Discontinuous Conversion Mode</h4><p>间断模式，再赘诉一下。这里的不连续含义是指每次触发进行一个子组的转换，跟Continuous Conversion Mode的连续含义不一样。例如使能了该配置，该参数的下方就立马出现Number Of Discontinuous Conversions，如果它设为2，且ADC1使能了通道1，2，5，7，10，11的话，那么第一次触发ADC1采样时，就会采样通道1与通道2的值，再一次触发ADC1采样的话，就会采样通道5与通道7值，如此类推。值得注意的是，Continuous Conversion Mode与Discontinuous Conversion Mode不能同时使能，两者不能共存。</p><h4 id="2210-dma-continuous-requests"><a class="markdownIt-Anchor" href="#2210-dma-continuous-requests"></a> 2.2.10. DMA Continuous Requests</h4><p>DMA连续请求：指定 DMA 请求是否以一次性模式执行(当达到转换次数时，DMA 传输停止)或在连续模式下(DMA 传输无限制，无论转换的数量)。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><ul><li>不使能：在这种模式下，每次有新的转换数据可用时，ADC都会生成一个DMA传输请求，一旦DMA到达最后一个DMA传输，即使转换已经再次开始，ADC也会停止生成DMA请求，适合转换固定数量数据的情况。</li><li>使能：在这种模式下，每当数据寄存器中有新的转换数据可用时，即使DMA已经到达最后一次DMA传输，ADC也会生成DMA传输请求。这允许在循环模式下配置DMA来处理连续的模拟输入数据流。</li></ul><h4 id="2211-overrun-behaviour"><a class="markdownIt-Anchor" href="#2211-overrun-behaviour"></a> 2.2.11. Overrun behaviour</h4><p>溢出处理：用于配置ADC转换数据未及时读取，造成溢出时的处理。</p><ul><li>Overrun data preserved:保留旧数据，丢弃和丢失新的转换。</li><li>Overrun data overwritten:数据寄存器被最后一次转换的结果覆盖，之前未读的数据丢失<br /><img src="Snipaste_2025-03-09_21-17-16.png" alt="" /></li></ul><h4 id="2212-conversion-data-managerment-modeh7"><a class="markdownIt-Anchor" href="#2212-conversion-data-managerment-modeh7"></a> 2.2.12. Conversion Data Managerment Mode（H7）</h4><p>转换数据管理模式。不使用DMA的话，不使用DFSDM数字滤波器做后期处理的话，选择Regular Conversion data stored in DR register only即可。其实就是选择存放转换完成的模拟量数据的地方而已。</p><h3 id="23-规则转换模式"><a class="markdownIt-Anchor" href="#23-规则转换模式"></a> 2.3. 规则转换模式</h3><h4 id="231-enable-regular-conversions"><a class="markdownIt-Anchor" href="#231-enable-regular-conversions"></a> 2.3.1. Enable Regular Conversions</h4><p>使能规则转换。使能它才能采集各个通道上的模拟量。</p><h4 id="232-enable-regular-oversamping不常用"><a class="markdownIt-Anchor" href="#232-enable-regular-oversamping不常用"></a> 2.3.2. Enable Regular Oversamping（不常用）</h4><p>使能规则过采样。<br /><img src="Snipaste_2025-03-10_14-20-12.png" alt="" /></p><h4 id="233-oversamping-right-shift不常用"><a class="markdownIt-Anchor" href="#233-oversamping-right-shift不常用"></a> 2.3.3. Oversamping Right Shift（不常用）</h4><p>过采样右移。<strong>过采样器能将累加的采样值进行右移</strong>。有什么用？比如过采样设置15，那么将采集16个值进行累加。接着配置右移动4位的话，相当于将刚才的累加值除以16，得到平均值。不需要在程序里求平均了。当然，如果大家喜欢在程序里求平均值也是可以的。</p><h4 id="234-number-of-conversion"><a class="markdownIt-Anchor" href="#234-number-of-conversion"></a> 2.3.4. Number Of Conversion</h4><p>转换通道数。根据ADC配置的通道数来选择。有多少转换通道就设置几。</p><h4 id="235-external-trigger-conversion-soure触发转换的外部来源"><a class="markdownIt-Anchor" href="#235-external-trigger-conversion-soure触发转换的外部来源"></a> 2.3.5. External Trigger Conversion Soure（触发转换的外部来源）</h4><p>选择触发转换的来源：</p><ul><li>Regular Conversion launched by software （软件触发）</li><li>Timer 1 Capture Compare 1 event （定时器1捕获比较事件1）</li><li>… （各种定时器触发来源）<br />一般使用软件触发就行。</li></ul><h4 id="236-external-trigger-conversion-edge触发转换的外部沿"><a class="markdownIt-Anchor" href="#236-external-trigger-conversion-edge触发转换的外部沿"></a> 2.3.6. External Trigger Conversion Edge（触发转换的外部沿）</h4><p>选择定时器触发时，需要进一步选择触发的沿。选择软件触发时，该项为None。<br />Trigger detection on the rising edge（上升沿）<br />Trigger detection on the falling edge（下降沿）<br />Trigger detection on the rising and falling edge（上升与下降沿）</p><h4 id="237-rank"><a class="markdownIt-Anchor" href="#237-rank"></a> 2.3.7. Rank</h4><p><img src="Snipaste_2025-03-10_14-29-51.png" alt="" /></p><ul><li>Channel：选择采样的通道。</li><li>Sampling Time：采样时间。配置多少个时钟周期，建议采样时间尽量长一点，以获得较高的准确度。总的转换时间=采样时间+逐次逼近时间（TSAR）。<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup><br />逐次逼近参考时间：请查阅相关数据手册。<br />这是一个参考：<br /><img src="Snipaste_2025-03-10_14-31-52.png" alt="" /></li></ul><h4 id="238-offset-number"><a class="markdownIt-Anchor" href="#238-offset-number"></a> 2.3.8. Offset Number</h4><p>偏移序号？？不懂。</p><h3 id="24-然后是注入转换模式"><a class="markdownIt-Anchor" href="#24-然后是注入转换模式"></a> 2.4. 然后是注入转换模式</h3><p>我们看到，在选择了ADC的相关通道引脚之后，在模拟至数字转换器中有两个通道：注入通道与规则通道。规则通道至多16个，注入通道至多4个。</p><h4 id="241-规则通道"><a class="markdownIt-Anchor" href="#241-规则通道"></a> 2.4.1. 规则通道：</h4><p>规则通道相当于你正常运行的程序，看它的名字就可以知道，很规矩，就是正常执行程序。</p><h4 id="242-注入通道"><a class="markdownIt-Anchor" href="#242-注入通道"></a> 2.4.2. 注入通道：</h4><p>注入通道可以打断规则通道，听它的名字就知道不安分，如果在规则通道转换过程中，有注入通道进行转换，那么就要先转换完注入通道，等注入通道转换完成后，再回到规则通道的转换流程。类似于中断。<br /><img src="Snipaste_2025-03-10_14-43-22.png" alt="" /></p><h3 id="25-最后是可爱的看门小狗~"><a class="markdownIt-Anchor" href="#25-最后是可爱的看门小狗~"></a> 2.5. 最后是可爱的看门小狗🥰~</h3><p>当被ADC转换的模拟电压值低于低阈值或高于高阈值时，便会产生中断。阈值的高低值由ADC_LTR和ADC_HTR配置。<br />可以防止读取到的电压值超量程或者低于量程，也可以监控CPU温度，防止温度过高，反正是用处多多。</p><h2 id="3-参考函数"><a class="markdownIt-Anchor" href="#3-参考函数"></a> 3. 参考函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启ADC 3种模式 ( 轮询模式 中断模式 DMA模式 )</span></span><br><span class="line">HAL_ADC_Start(&amp;hadcx);       <span class="comment">//轮询模式开启ADC</span></span><br><span class="line">HAL_ADC_Start_IT(&amp;hadcx);       <span class="comment">//中断轮询模式开启ADC</span></span><br><span class="line">HAL_ADC_Start_DMA(&amp;hadcx);       <span class="comment">//DMA模式开启ADC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭ADC 3种模式 ( 轮询模式 中断模式 DMA模式 )</span></span><br><span class="line">HAL_ADC_Stop();</span><br><span class="line">HAL_ADC_Stop_IT();</span><br><span class="line">HAL_ADC_Stop_DMA();</span><br><span class="line"></span><br><span class="line"><span class="comment">//ADC校准函数 ：F4系列不支持</span></span><br><span class="line">HAL_ADCEx_Calibration_Start(&amp;hadcx);      </span><br><span class="line"></span><br><span class="line"><span class="comment">//读取ADC转换值</span></span><br><span class="line">HAL_ADC_GetValue();</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待转换结束函数.第一个参数为哪个ADC,第二个参数为最大等待时间</span></span><br><span class="line">HAL_ADC_PollForConversion(&amp;hadc1, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ADC中断回调函数</span></span><br><span class="line">HAL_ADC_ConvCpltCallback();</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换完成后回调，DMA模式下DMA传输完成后调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//规则通道及看门狗配置</span></span><br><span class="line">HAL_ADC_ConfigChannel(); <span class="comment">//配置规则组通道</span></span><br><span class="line">HAL_ADC_AnalogWDGConfig();</span><br></pre></td></tr></table></figure><h2 id="4-参考博客"><a class="markdownIt-Anchor" href="#4-参考博客"></a> 4. 参考博客</h2><p>有星星的是我觉得写的很好的博客。</p><ul><li>⭐⭐⭐<a href="https://blog.csdn.net/wallace89/article/details/117048846">STM32H743-梳理ADC模数转换器在CubeMX上的配置_overrun behaviour-CSDN博客</a>遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议</li><li>⭐⭐⭐<a href="https://blog.csdn.net/demonneverhunts/article/details/135155881">STM32CubeIde ADC配置详解_end of conversion selection-CSDN博客</a>遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议</li><li>⭐⭐⭐<a href="https://blog.csdn.net/as480133937/article/details/99627062">【STM32】HAL库 STM32CubeMX教程九—ADC_cubemx adc-CSDN博客</a></li><li><a href="https://blog.csdn.net/chenhuanqiangnihao/article/details/122086308">ADC的单端输入、伪差分输入、差分输入区别？_差分adc-CSDN博客</a></li></ul><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>ADC的工作频率需要查阅相关数据手册,工作频率太高会导致转换无法完成。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>在连续模式下，DMA 必须配置为循环模式。否则，当达到 DMA 缓冲区最大指针时将触发溢出。 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>时间可以用ADC时钟周期来衡量。例如12bitADC的逐次逼近时间为12.5个ADC时钟周期 <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">本篇介绍了STM32 ADC的相关配置。</summary>
    
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="CubeMX配置功能" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/CubeMX%E9%85%8D%E7%BD%AE%E5%8A%9F%E8%83%BD/"/>
    
    
    <category term="STM32" scheme="https://blog.godmao.top/Tags/STM32/"/>
    
    <category term="CubeMX" scheme="https://blog.godmao.top/Tags/CubeMX/"/>
    
    <category term="ADC" scheme="https://blog.godmao.top/Tags/ADC/"/>
    
    <category term="嵌入式" scheme="https://blog.godmao.top/Tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.godmao.top/posts/16107/"/>
    <id>https://blog.godmao.top/posts/16107/</id>
    <published>2025-03-09T06:33:48.000Z</published>
    <updated>2025-03-09T06:33:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CubeMX配置功能系列：ADC（上）</title>
    <link href="https://blog.godmao.top/posts/9852/"/>
    <id>https://blog.godmao.top/posts/9852/</id>
    <published>2025-03-09T03:02:18.000Z</published>
    <updated>2025-03-10T07:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章为博主原创文章。遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#1-%E8%AF%B4%E6%98%8E">1. 说明</a></li><li><a href="#2-analog-to-digital-converter%E7%AE%80%E4%BB%8B">2. Analog-to-Digital Converter简介</a></li><li><a href="#3-stm32%E9%87%8C%E7%9A%84adc%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%BD%AC%E6%8D%A2%E7%9A%84">3. STM32里的ADC是如何进行转换的？</a><ul><li><a href="#31-%E6%95%B0%E6%8D%AE%E5%AF%B9%E9%BD%90">3.1. 数据对齐</a></li><li><a href="#32-%E5%85%B7%E4%BD%93%E8%AF%B4%E6%98%8E">3.2. 具体说明：</a></li></ul></li><li><a href="#4-adc%E7%9A%84%E8%BD%AC%E6%8D%A2%E6%A8%A1%E5%BC%8F">4. ADC的转换模式</a><ul><li><a href="#41-%E5%85%B3%E4%BA%8E%E6%98%AF%E5%90%A6%E8%A6%81%E6%8C%81%E7%BB%AD%E8%BD%AC%E6%8D%A2">4.1. 关于是否要持续转换</a></li><li><a href="#42-%E5%A6%82%E6%9E%9C%E6%9C%89%E5%A4%9A%E4%B8%AA%E9%80%9A%E9%81%93">4.2. 如果有多个通道</a></li></ul></li><li><a href="#5-%E5%8F%82%E8%80%83%E5%8D%9A%E5%AE%A2">5. 参考博客</a></li></ul><h2 id="1-说明"><a class="markdownIt-Anchor" href="#1-说明"></a> 1. 说明</h2><p>ADC作为对我来说不怎么用的功能，记录一下很有必要。本文以<em>STM32G4</em>系列为例。供自己学习与记录且只做简单介绍。有一定基础的朋友可参考。</p><h2 id="2-analog-to-digital-converter简介"><a class="markdownIt-Anchor" href="#2-analog-to-digital-converter简介"></a> 2. Analog-to-Digital Converter简介</h2><p>模拟到数字转换器，简称ADC。将连续的模拟信号转换为数字信号。</p><h2 id="3-stm32里的adc是如何进行转换的"><a class="markdownIt-Anchor" href="#3-stm32里的adc是如何进行转换的"></a> 3. STM32里的ADC是如何进行转换的？</h2><p>采用的是SAR（逐次逼近）的方法。通过二分比较使数字量逼近真实的模拟信号量。<br /><br />一般stm32中的ADC储存转换结果的寄存器有效位为12位，也可以说该ADC的分辨率为12位。模拟量经过转换后与数字量是线性关系<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，0x000代表测量最小值。0xfff代表测量最大值（即参考电压值）。</p><h3 id="31-数据对齐"><a class="markdownIt-Anchor" href="#31-数据对齐"></a> 3.1. 数据对齐</h3><p>尽管分辨率为12位，也是放在16位寄存器里的，那么就涉及数据对齐的问题。</p><ul><li>若12位数据是右对齐的，即结果为0x0???，这样得到的结果直接就是转换结果。</li><li>若选择左对齐，即结果为0x???0，相当于<code>0x0???&lt;&lt;4</code><span class="spoiler">不会有人觉得是左移1位吧</span> 我们都知道右移四位相当于乘以2<sup>4</sup>，比实际数据增大了16倍。那么我们为什么还需要左对齐呢？有时我们对分辨率要求不高，只需大概判断，所以我们用左对齐取出寄存器的高8位，相当于舍弃4位转换精度，降为8位分辨率。</li></ul><h3 id="32-具体说明"><a class="markdownIt-Anchor" href="#32-具体说明"></a> 3.2. 具体说明：</h3><p>例如，我们需要测量模拟量为0.9V 过程如下<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>：</p><ol><li>通过GPIO口采样待测电压到电容上。</li><li>切断与待测信号的连接，将待测电压保持在电容上。</li><li>我们从最高位开始 ?000-0000-0000 ，我们知道 1000-0000-0000 刚好对应十进制2048，根据线性关系2048刚好对应参考电压的一半。所以这里相当于将参考电压值的一半1.65v与待测电压比较。如果待测电压没有1.65v高，就将最高位置0。我们就知道待测电压对应在0~2048之间。此时我们就要和1024比较，1024二进制表示为 0100-0000-0000，刚好是次高位置1的情况。以此类推，直到12位全部比较完，就能确定哪些位是1哪些位是0。</li></ol><h2 id="4-adc的转换模式"><a class="markdownIt-Anchor" href="#4-adc的转换模式"></a> 4. ADC的转换模式</h2><h3 id="41-关于是否要持续转换"><a class="markdownIt-Anchor" href="#41-关于是否要持续转换"></a> 4.1. 关于是否要持续转换</h3><ol><li>单次转换模式：ADC只执行一次转换；</li><li>连续转换模式：转换结束之后马上开始新的转换；</li></ol><h3 id="42-如果有多个通道"><a class="markdownIt-Anchor" href="#42-如果有多个通道"></a> 4.2. 如果有多个通道</h3><ol><li>扫描模式：ADC扫描被规则通道和注入通道选中的所有通道，在每个组的每个通道上执行单次转换。在每个转换结束时，这一组的下一个通道被自动转换。如果设置了CONT位（开启了连续转换模式），转换不会在选择组的最后一个通道上停止，而是再次从选择组的第一个通道继续转换。</li><li>间断模式：触发一次，转换一个通道，再触发，再转换。在所选转换通道循环，由触发信号启动新一轮的转换，直到转换完成为止。</li></ol><h2 id="5-参考博客"><a class="markdownIt-Anchor" href="#5-参考博客"></a> 5. 参考博客</h2><p>给星星的是我觉得写得很好的博客。</p><ul><li>⭐⭐⭐<a href="https://blog.csdn.net/as480133937/article/details/99627062">【STM32】HAL库 STM32CubeMX教程九—ADC_cubemx adc-CSDN博客</a></li></ul><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>以12位分辨率ADC为例，参考电压3.3v：电压值y=转换结果x·3.3/4096. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>参考电压3.3v，12位精度 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">本篇介绍了STM32 ADC的相关功能。</summary>
    
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="CubeMX配置功能" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/CubeMX%E9%85%8D%E7%BD%AE%E5%8A%9F%E8%83%BD/"/>
    
    
    <category term="STM32" scheme="https://blog.godmao.top/Tags/STM32/"/>
    
    <category term="CubeMX" scheme="https://blog.godmao.top/Tags/CubeMX/"/>
    
    <category term="ADC" scheme="https://blog.godmao.top/Tags/ADC/"/>
    
    <category term="嵌入式" scheme="https://blog.godmao.top/Tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单片机（伪）多任务处理：时间片轮询法</title>
    <link href="https://blog.godmao.top/posts/39448/"/>
    <id>https://blog.godmao.top/posts/39448/</id>
    <published>2025-03-07T14:35:48.000Z</published>
    <updated>2025-03-09T13:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章为博主原创文章。遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><h2 id="引入"><a class="markdownIt-Anchor" href="#引入"></a> 引入</h2><p>在新手刚刚入门时，通常使用的程序架构为裸机、顺序执行。也就是说把所有的功能放在一个<code>while(1)</code>死循环中然后单片机不断循环执行。有必要的话会加上一些中断用来处理一些紧急事件或者外部的信号，构成经典的前后台系统。但是这样做有什么弊端呢？这是我在我踩过坑后意识到的：</p><ol><li>有些程序完全不需要频繁执行，比如LED的刷新，按键的检测等。放在死循环中执行对CPU比较浪费。</li><li>随着功能的增多或者代码变得复杂你会感觉到程序越写越困难，循环中的功能模块有时需要和中断联动，各个模块之间也有可能需要联动起来。即使使用状态机也力不从心…</li><li>勉勉强强完成了任务，后期的维护也变得相当的麻烦。</li></ol><p>踩过坑后的我痛定思痛：准备以后写程序都请出RTOS这个大手子。但是后来我又发现 有时你想要实现的功能刚好介于复杂与不复杂之间…咋理解呢，就是说用顺序执行，复杂了点，用RTOS吧好像也没必要…毕竟移植还是挺麻烦的。当然还有就是RTOS体量过大，有些单片机吃不下，或者吃下了但是也撑的吃不下自己写的代码了<span class="spoiler">属于是小鸟胃这一块，不过目前我还没遇到过，我用的单片机基本上属于大卫戴这一块</span></p><h2 id="时间片轮询法"><a class="markdownIt-Anchor" href="#时间片轮询法"></a> 时间片轮询法</h2><p>为了优化上面这些问题，大佬们于是提出了一种基于时间片的裸机开发架构，我们可以利用一个定时器提供心跳，不断的进行计数。然后当定时时间一到，那么就可以开始执行相应的任务了。</p><h3 id="talk-is-cheapshow-me-the-code"><a class="markdownIt-Anchor" href="#talk-is-cheapshow-me-the-code"></a> Talk is cheap，Show me the code.</h3><p>首先是.h头文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __OS_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __OS_H__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//任务状态</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">TaskStatus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    wait,run,stop</span><br><span class="line"></span><br><span class="line">&#125;TaskStatus;<span class="comment">//等待运行、正在运行、停止运行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//任务信息块</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">uint16_t</span>    TaskTimer;    <span class="comment">//用于计时</span></span><br><span class="line"></span><br><span class="line">    <span class="type">uint16_t</span>    TaskRunTime;  <span class="comment">//每隔多少时间运行一次</span></span><br><span class="line"></span><br><span class="line">    TaskStatus  Status;       <span class="comment">//任务状态</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> (*FC)();             <span class="comment">//任务函数指针</span></span><br><span class="line"></span><br><span class="line">&#125;TaskStruct;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">OSInit</span><span class="params">(TIM_HandleTypeDef htim)</span>;<span class="comment">//初始化设置，这里是用的STM32hal库</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OS_IT_RUN</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//放在提供心跳的定时器中断里运行</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OS_Run</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//主函数里运行的</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>然后是.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * @file           : OS.c</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * @brief          : 任务函数、OS内核</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OS.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 任务声明------------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">A</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">B</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">C</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* -------------------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 任务清单配置---------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> TaskCount = <span class="number">0</span>;<span class="comment">//记录任务数量  </span></span><br><span class="line"></span><br><span class="line">TaskStruct TaskList[] = &#123;</span><br><span class="line"></span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">5</span>,run,A&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">10</span>,wait,B&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">3</span>,wait,C&#125;,</span><br><span class="line"></span><br><span class="line">&#125;;<span class="comment">//任务清单</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* -------------------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 任务同步所需公共变量--------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* -------------------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">/* OS 主功能代码--------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OSInit</span><span class="params">(TIM_HandleTypeDef htim)</span>&#123;<span class="comment">//可以根据自己的需求重新写</span></span><br><span class="line"></span><br><span class="line">    HAL_TIM_Base_Start_IT(&amp;htim);                       <span class="comment">//打开定时器</span></span><br><span class="line"></span><br><span class="line">    TaskCount = <span class="keyword">sizeof</span>(TaskList)/<span class="keyword">sizeof</span>(TaskList[<span class="number">0</span>]);   <span class="comment">//利用sizeof计算数组长度的方法可得到任务数量</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">//放在中断中执行</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OS_IT_RUN</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;TaskCount;i++)&#123;              <span class="comment">//遍历所有循环</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(TaskList[i].Status == wait)&#123;    <span class="comment">//当任务wait状态，执行以下步骤</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(++TaskList[i].TaskTimer &gt;= TaskList[i].TaskRunTime)&#123;</span><br><span class="line">            <span class="comment">//计时，并判断是否到达定时时间                 </span></span><br><span class="line">            <span class="comment">//如果到了定时时间，则将任务挂起，并复位计时（也可以执行完后复位，效果一样）</span></span><br><span class="line">                TaskList[i].TaskTimer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                TaskList[i].Status = run;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">//放在main函数中执行，自带死循环，用于执行任务</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OS_Run</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> j=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(TaskList[j].Status == run)&#123;                  <span class="comment">//判断一个任务是否为run状态</span></span><br><span class="line"></span><br><span class="line">            TaskList[j].FC();                           <span class="comment">//执行该任务函数</span></span><br><span class="line"></span><br><span class="line">            TaskList[j].Status = wait ;                 <span class="comment">//取消任务的run状态</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(++j&gt;=TaskCount)j=<span class="number">0</span>;                          <span class="comment">//不断循环遍历所有任务</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 这里可以定义空闲任务 */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">/* -------------------------------------------------------------------------*/</span></span><br></pre></td></tr></table></figure><p><strong>按照分而治之的思想，完全可以把任务函数重新写在一个task.c文件中，这样更加简洁美观</strong>。<br />采用上面的代码，个人认为比为每个功能函数提供一个flag，时间到达后将任务标志为置位。然后在main函数的循环中检查标志位状态（类似状态机）那种方法要方便。避免了一些重复的工作。</p><h3 id="什么意思"><a class="markdownIt-Anchor" href="#什么意思"></a> 什么意思</h3><p>比如我有三个功能：</p><ul><li>A：5ms执行一次</li><li>B：10ms执行一次</li><li>C：3ms执行一次</li></ul><p>我们随机提拔一个定时器作为心跳时钟，说白了就是掐表的嘛。这个定时器一般使用基本定时器性价比高一点。这个定时器每隔1ms就叫一下，我们可以决定ABC在上电时候时是否执行，或者上电后延迟一个自己的任务周期再执行。比如我们设定上电时：仅A执行。如果我们忽略代码的执行时间，那么程序就是这么运行的：</p><p><code>A-1ms-1ms-1ms(C)-1ms-1ms(A)-1ms(C)-1ms-1ms-1ms(C)-1ms(A、B)--------</code></p><p>如果上一个功能模块已经执行完了，但下一个功能模块的定时时间还没到，便会产生空闲时间，这那些1ms后没有括号的就是CPU的空闲段。同样可以像RTOS那样把空闲时间给空闲任务。<br />注意当前延时了多少时间是一个函数执行完就直接开始计算的，我之前就理解为了一个时间片只有一个函数执行。实际上不是的。</p><h2 id="这样的方法有什么不足"><a class="markdownIt-Anchor" href="#这样的方法有什么不足"></a> 这样的方法有什么不足？</h2><ol><li>首先，像这样的丐版RTOS，实时性并没有真正的RTOS高，不是说执行就执行，会有一些延迟。</li><li><strong>如果某个任务运行时间超过一个时间片，它可能会一直占用CPU，导致后面的任务无法及时执行，从而影响系统的响应时间。然后一整个就乱了。</strong> <s>但是个人感觉如果实时性要求不高，也无伤大雅🤔</s></li></ol><p>比如时间片为1ms。A运行时间为2ms，每隔4ms执行一次。B运行时间不计，每隔3ms运行一次。</p><p>（A1ms-1ms）-1ms(B)-1ms(A1ms-1ms)(B)-1ms-1ms(A1ms(<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>)-1ms)(B<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>)-----</p><h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章</h2><ul><li><a href="https://blog.csdn.net/qq_63922192/article/details/132746564">嵌入式裸机设计思想——时间片轮裸机开发架构+状态机+定时器调度机制_基于状态机制 定时器-CSDN博客</a>遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议</li><li><a href="https://blog.csdn.net/weixin_44843021/article/details/117490107">STM32裸机-时间片任务轮询_时间片轮询-CSDN博客</a>遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议</li></ul><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>这里该执行B了，但由于A抢占CPU，无法执行。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>这次B实际上隔了4ms才执行 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">关于时间片轮询法在单片机的应用。</summary>
    
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="程序架构" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/Tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="程序架构" scheme="https://blog.godmao.top/Tags/%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/"/>
    
    <category term="单片机" scheme="https://blog.godmao.top/Tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="多任务" scheme="https://blog.godmao.top/Tags/%E5%A4%9A%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>属于自己的引导页</title>
    <link href="https://blog.godmao.top/posts/38456/"/>
    <id>https://blog.godmao.top/posts/38456/</id>
    <published>2025-03-01T05:59:00.000Z</published>
    <updated>2025-04-06T07:00:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网站截图"><a class="markdownIt-Anchor" href="#网站截图"></a> 网站截图</h2><p><img src="Snipaste_2025-03-01_13-57-17.png" alt="" /></p><h2 id="感谢"><a class="markdownIt-Anchor" href="#感谢"></a> 感谢</h2><p>网站整体的代码架构和设计思路都基于<a href="https://zyyo.net/">Zyyo</a>的个人主页，这是GitHub项目地址：<a href="https://github.com/ZYYO666/homepage">ZYYO666/homepage: 我的个人主页，homepage,个人引导页,简约主页,个人导航</a></p><p>很多css动画来自codepen里的大佬，我自己稍加修改！以下为部分网页使用的：</p><ul><li><a href="https://codepen.io/graphilla/details/zEZKpN">时钟</a></li><li><a href="https://codepen.io/dannymoerkerke/details/wBwYzRe">列表收起与展开</a></li><li><a href="https://codepen.io/yoannhel/details/DMzjog">hello world动画</a></li></ul><h2 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h2><p>放寒假，在家实在无聊，看到各路大佬都有一个属于自己blog，便有了建一个自己的blog的想法。于是了解到了hexo ，然后各种抄能力🤓也算是搭好了自己的一个博客并托管在了GitHub，结果没想到还不够过瘾，想知道完全从0开始搭一个静态网页是什么体验，于是又在边搞边学的情况下整了个这个引导页，学习到了html和css（没有js，js全是抄的…🥹<s>好吧其实部分源码架构也是抄的，毕竟也可以学习一下大佬写代码的结构</s>）</p><h2 id="to-do"><a class="markdownIt-Anchor" href="#to-do"></a> TO DO</h2><ul><li>[ ]  适配黑夜模式</li><li>[ ]  适配移动端</li></ul>]]></content>
    
    
    <summary type="html">自己设计了个属于自己的引导页</summary>
    
    
    
    <category term="web前端" scheme="https://blog.godmao.top/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="网页" scheme="https://blog.godmao.top/Tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="web" scheme="https://blog.godmao.top/Tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CubeMX配置功能系列：Timer（下）</title>
    <link href="https://blog.godmao.top/posts/48581/"/>
    <id>https://blog.godmao.top/posts/48581/</id>
    <published>2025-02-22T06:29:30.000Z</published>
    <updated>2025-03-09T09:36:36.000Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章为博主原创文章。遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><h2 id="1-目录"><a class="markdownIt-Anchor" href="#1-目录"></a> 1. 目录</h2><ul><li><a href="#1-%E7%9B%AE%E5%BD%95">1. 目录</a></li><li><a href="#2-%E8%AF%B4%E6%98%8E">2. 说明</a></li><li><a href="#3-tim-%E5%90%84%E7%A7%8D%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3">3. TIM 各种模式详解</a><ul><li><a href="#31-%E4%BB%8E%E6%A8%A1%E5%BC%8F">3.1. 从模式</a><ul><li><a href="#311-%E7%AE%80%E4%BB%8B">3.1.1. 简介</a></li><li><a href="#312-%E5%A4%8D%E4%BD%8D%E6%A8%A1%E5%BC%8Frm">3.1.2. 复位模式（RM）</a></li><li><a href="#313-%E9%97%A8%E6%8E%A7%E6%A8%A1%E5%BC%8Fgm">3.1.3. 门控模式（GM）</a></li><li><a href="#314-%E8%A7%A6%E5%8F%91%E6%A8%A1%E5%BC%8Ftm">3.1.4. 触发模式（TM）</a></li><li><a href="#315-%E5%A4%96%E9%83%A8%E6%97%B6%E9%92%9F%E6%A8%A1%E5%BC%8F1">3.1.5. 外部时钟模式1</a></li><li><a href="#316-%E4%B8%80%E4%B8%AA%E7%A4%BA%E4%BE%8B">3.1.6. 一个示例</a></li><li><a href="#317-%E5%8F%82%E8%80%83">3.1.7. 参考</a></li></ul></li><li><a href="#32-%E7%BC%96%E7%A0%81%E5%99%A8%E6%A8%A1%E5%BC%8F">3.2. 编码器模式</a></li><li><a href="#33-%E8%A7%A6%E5%8F%91%E6%BA%90">3.3. 触发源</a></li><li><a href="#34-%E6%97%B6%E9%92%9F%E6%BA%90">3.4. 时钟源</a></li><li><a href="#35-%E4%B8%BB%E6%A8%A1%E5%BC%8F">3.5. 主模式</a><ul><li><a href="#351-%E6%AF%94%E8%BE%83%E4%B8%8E%E6%8D%95%E8%8E%B7">3.5.1. 比较与捕获</a></li></ul></li><li><a href="#36-%E4%B8%80%E4%BA%9B%E7%96%91%E6%83%91%E7%9A%84%E5%9C%B0%E6%96%B9">3.6. 一些疑惑的地方</a><ul><li><a href="#361-qoutput-compare-no-output%E6%98%AF%E4%BB%80%E4%B9%88%E6%A8%A1%E5%BC%8F%E5%A5%BD%E7%9F%9B%E7%9B%BE%E7%9A%84%E5%90%8D%E5%AD%97">3.6.1. Q：<code>output compare no output</code>是什么模式？好矛盾的名字。。。</a></li><li><a href="#362-q%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83%E5%92%8Cpwm%E7%94%9F%E6%88%90%E6%A8%A1%E5%BC%8F%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB">3.6.2. Q：输出比较和PWM生成模式有何区别与联系？</a></li><li><a href="#363-q%E4%BD%95%E4%B8%BA%E5%BC%BA%E5%88%B6%E8%BE%93%E5%87%BA%E6%9C%89%E5%95%A5%E7%94%A8">3.6.3. Q：何为强制输出？有啥用？</a><ul><li><a href="#3631-%E5%BC%BA%E5%88%B6%E8%BE%93%E5%87%BA%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86">3.6.3.1. 强制输出模式的工作原理：</a></li><li><a href="#3632-%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD">3.6.3.2. 主要功能：</a></li><li><a href="#3633-%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F">3.6.3.3. 工作模式：</a></li><li><a href="#3634-%E4%BE%8B%E5%AD%90">3.6.3.4. 例子：</a></li><li><a href="#3635-%E6%80%BB%E7%BB%93">3.6.3.5. 总结：</a></li></ul></li><li><a href="#364-q%E8%BE%93%E5%85%A5%E6%8D%95%E8%8E%B7%E7%9A%84%E9%97%B4%E6%8E%A5%E6%A8%A1%E5%BC%8F">3.6.4. Q：输入捕获的间接模式？</a><ul><li><a href="#3641-%E7%89%B9%E7%82%B9">3.6.4.1. 特点：</a></li><li><a href="#3642-%E4%BB%A5%E4%B8%8B%E6%98%AF%E7%9B%B4%E6%8E%A5%E4%B8%8E%E9%9D%9E%E7%9B%B4%E6%8E%A5%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%AF%94%E8%BE%83">3.6.4.2. 以下是直接与非直接模式的比较</a></li></ul></li><li><a href="#365-%E5%8F%82%E8%80%83">3.6.5. 参考</a></li></ul></li></ul></li></ul><h2 id="2-说明"><a class="markdownIt-Anchor" href="#2-说明"></a> 2. 说明</h2><p>本文以STM32G4系列为例。供自己学习与记录且只做简单介绍。有一定基础的朋友可参考。</p><hr /><h2 id="3-tim-各种模式详解"><a class="markdownIt-Anchor" href="#3-tim-各种模式详解"></a> 3. TIM 各种模式详解</h2><p>如下为一个高级定时器的配置页面<br /><img src="CubeMX%E9%85%8D%E7%BD%AE%E5%8A%9F%E8%83%BD%E7%B3%BB%E5%88%97%EF%BC%9ATimer%EF%BC%88%E4%B8%8A%EF%BC%89/Snipaste_2025-02-22_14-10-44.png" alt="" /></p><h3 id="31-从模式"><a class="markdownIt-Anchor" href="#31-从模式"></a> 3.1. 从模式</h3><p>可配置功能<br /><img src="CubeMX%E9%85%8D%E7%BD%AE%E5%8A%9F%E8%83%BD%E7%B3%BB%E5%88%97%EF%BC%9ATimer%EF%BC%88%E4%B8%8A%EF%BC%89/Snipaste_2025-02-22_14-14-22.png" alt="" /></p><h4 id="311-简介"><a class="markdownIt-Anchor" href="#311-简介"></a> 3.1.1. 简介</h4><p>定时器的从模式控制器可以对计数器实现哪些控制或影响呢？从模式控制器检测到触发输入信号时，可以对定时器进行如下操作而控制或影响计数器的工作：</p><ol><li>对计数器复位</li><li>启动或停止计数器的计数动作</li><li>使能计数器模块的工作</li><li>通过触发信号为计数器提供时钟源</li></ol><h4 id="312-复位模式rm"><a class="markdownIt-Anchor" href="#312-复位模式rm"></a> 3.1.2. 复位模式（RM）</h4><p>主定时器出现信号后：从定时器计数器复位并产生一个中断。</p><p>不妨以计数器向上计数为例，将它配置在复位从模式。比方说当计数器计数到某个数据的时候，来了个触发信号，计数器不再继续往上计数，而是重新归0后开始计数。当然，计数器的实际复位操作与触发沿之间往往会有个小的延时，这是由于触发信号作为有效触发脉冲的话，还需要经过定时器内的同步电路确认。</p><p>关于处于复位模式下的定时器，有两点提醒：</p><ol><li>只要有复位触发脉冲出现，计数器就会被复位重置。复位次数取决于触发脉冲次数。</li><li>工作在复位模式下的定时器，其使能需靠软件代码实现，即使能定时器的CEN@TIMx_CR1位。</li></ol><h4 id="313-门控模式gm"><a class="markdownIt-Anchor" href="#313-门控模式gm"></a> 3.1.3. 门控模式（GM）</h4><p>主定时器出现信号后：从定时器计数器开始工作</p><p>主定时器信号结束后：从定时器计数器停止工作并产生中断</p><h4 id="314-触发模式tm"><a class="markdownIt-Anchor" href="#314-触发模式tm"></a> 3.1.4. 触发模式（TM）</h4><p>主定时器出现信号后：从定时器计数器开始工作，并且不会停止。</p><p>触发模式主定时器只是提供了一个启动从定时器开始时间的控制，并不会有其他效果，触发从模式下，触发信号具有相当于软件使能计数器的作用，即置位CEN@TIMx_CR1，这也是它最大最明显的特征。</p><h4 id="315-外部时钟模式1"><a class="markdownIt-Anchor" href="#315-外部时钟模式1"></a> 3.1.5. 外部时钟模式1</h4><p>外部时钟模式1从模式比较特别，当计数器的时钟源来自触发信号时，此时定时器就工作在外部时钟1从模式，此时触发信号扮演着双角色，即<strong>触发信号</strong>与<strong>时钟信号</strong>。</p><p>比如，我们可以使用来自ETR脚的滤波信号ETRF作为触发信号并担当计数器的时钟源。</p><h4 id="316-一个示例"><a class="markdownIt-Anchor" href="#316-一个示例"></a> 3.1.6. 一个示例</h4><p>Q：开启两个定时器，定时器2与定时器3，均作pwm输出，定时器3的pwm输出跟随定时器2的pwm输出。<br />如何做才能又准又稳定还不占用cpu资源？</p><p>大致思路：定时器2的ch2输出，并将ch2的OC2REF作为从定时器3的TRGO，并通过主从对应表，找到相应的ITRx，当出现上升沿或下降沿时，会触发从定时器的开启。应将定时器3配置为触发模式（Trigger Mode）</p><h4 id="317-参考"><a class="markdownIt-Anchor" href="#317-参考"></a> 3.1.7. 参考</h4><ul><li>👍👍👍<a href="https://news.eeworld.com.cn/mcu/ic634774.html">【话说定时器系列】之三：STM32定时器的信号触发与主从模式-电子工程世界</a></li><li><a href="https://blog.csdn.net/weixin_44748127/article/details/123726458">stm32定时器从模式解析_stm32定时器主从模式-CSDN博客</a></li></ul><h3 id="32-编码器模式"><a class="markdownIt-Anchor" href="#32-编码器模式"></a> 3.2. 编码器模式</h3><p>对于编码器模式，它是针对编码器应用的一个特定从模式，应用时注意使用定时器的通道1、通道2引进编码器脉冲，这里不赘述。</p><h3 id="33-触发源"><a class="markdownIt-Anchor" href="#33-触发源"></a> 3.3. 触发源</h3><p><img src="Snipaste_2025-02-22_14-34-20.png" alt="" /></p><p>结合原理图，我们可以知道定时器可由触发源触发启动。</p><h3 id="34-时钟源"><a class="markdownIt-Anchor" href="#34-时钟源"></a> 3.4. 时钟源</h3><p>分为内部时钟和外部触发（外界其他信号源），不再赘诉。</p><h3 id="35-主模式"><a class="markdownIt-Anchor" href="#35-主模式"></a> 3.5. 主模式</h3><p>这是通道1的可配置功能：<br /><img src="Snipaste_2025-02-22_15-02-04.png" alt="" /><br /><img src="Snipaste_2025-02-22_15-02-14.png" alt="" /></p><p>细讲一下</p><h4 id="351-比较与捕获"><a class="markdownIt-Anchor" href="#351-比较与捕获"></a> 3.5.1. 比较与捕获</h4><p>捕获</p><p>什么是捕获？</p><p>所谓捕获就是通过检测捕获通道上的边沿信号。在边沿信号发生跳变（比如上升沿/下降沿）的时候，将当前定时器的值(TIMx_CNT)存放到对应的通道的捕获/比较寄存器(TIMx_CCR)里面，完成一次捕获。</p><p>STM32支持一下捕获模式：</p><ol><li>输入捕获模式</li><li>PWM输入模式</li></ol><p>输入捕获模式可以用来测量脉冲宽度或者测量频率。下图是输入捕获测量高电平脉宽的原理，假定定时器工作在向上计数模式，图中 t1~t2 时间，就是需要测量的高电平时间。<br /><img src="20220309022442146.png" alt="" /><br />测量方法如下：首先设置定时器通道x为上升沿捕获，这样，t1 时刻，就会捕获到当前的 CNT 值，然后立即清零 CNT，并设置通道x下降沿捕获，这样到 t2 时刻，又会发生捕获事件，得到此时的 CNT 值，记为CCRx2。这样，根据定时器的计数频率，我们就可以算出 t1~t2 的时间，从而得到高电平脉宽。</p><p>比较</p><p>什么是比较？</p><p>所谓比较就是计数器的值和与装载的值进行比较，<strong>和外部的信号没关系</strong>。</p><p>STM32支持一下比较模式：</p><ol><li>强制输出模式</li><li>输出比较模式</li><li><strong>PWM模式</strong></li><li>单脉冲模式</li></ol><h3 id="36-一些疑惑的地方"><a class="markdownIt-Anchor" href="#36-一些疑惑的地方"></a> 3.6. 一些疑惑的地方</h3><h4 id="361-qoutput-compare-no-output是什么模式好矛盾的名字"><a class="markdownIt-Anchor" href="#361-qoutput-compare-no-output是什么模式好矛盾的名字"></a> 3.6.1. Q：<code>output compare no output</code>是什么模式？好矛盾的名字。。。</h4><p>A：<code>Output Compare No Output</code>意味着该定时器的输出比较（Output Compare）功能已经启用，但它不会实际输出到引脚上。具体来说，定时器的输出比较功能通常是用来生成定时信号（比如 PWM 或捕获信号）。如果你选择<code>Output Compare No Output</code>，这表示：</p><ol><li><strong>输出比较功能启用</strong>：定时器仍然会根据设置的比较值（比如定时器计数器和比较寄存器的匹配）产生一个事件。</li><li><strong>不输出到引脚</strong>：虽然比较功能可以触发中断或设置状态，但是并没有配置定时器的输出引脚（比如一个 PWM 信号）去响应这些事件。这种配置适用于只需要定时器功能（比如触发中断）而不需要具体的硬件输出。</li></ol><p><code>Output Compare No Output</code>就是配置定时器的输出比较功能，不去生成实际的引脚信号，可能只是用来<strong>触发事件</strong>或<strong>控制中断</strong>。</p><h4 id="362-q输出比较和pwm生成模式有何区别与联系"><a class="markdownIt-Anchor" href="#362-q输出比较和pwm生成模式有何区别与联系"></a> 3.6.2. Q：输出比较和PWM生成模式有何区别与联系？</h4><p>A：输出比较（Output Compare）和 PWM 生成模式（PWM Generation Mode）虽然都依赖于定时器的输出比较功能，但它们的应用场景和工作方式有所不同。下面是它们之间的主要区别与联系：</p><table><thead><tr><th><strong>模式</strong></th><th><strong>输出比较（Output Compare）</strong></th><th><strong>PWM 生成模式（PWM Generation Mode）</strong></th></tr></thead><tbody><tr><td><strong>基本概念</strong></td><td>计数器的值与预设比较值比较，匹配时产生事件。</td><td>基于输出比较功能，周期性地生成脉宽调制（PWM）信号。计数器与比较值的关系决定引脚状态（高或低）。</td></tr><tr><td><strong>作用</strong></td><td>设置引脚状态或触发中断</td><td>根据计数器值与比较值的关系周期性改变引脚状态。</td></tr><tr><td><strong>用途</strong></td><td>触发定时器事件，控制外部硬件信号（如设置引脚为高或低）。</td><td>控制电机、LED亮度调节、电源管理等应用，需要调节占空比。</td></tr><tr><td><strong>典型应用</strong></td><td>定时脉冲、事件触发、精确的定时控制</td><td>电机控制、LED亮度调节、信号调制</td></tr><tr><td><strong>周期性输出</strong></td><td>否，输出比较通常产生单次信号或事件，不是周期性的。</td><td>是，生成周期性的波形。</td></tr><tr><td><strong>倾向目标</strong></td><td>生成事件（如中断）。</td><td>生成周期性的波形信号。</td></tr></tbody></table><p>简而言之，输出比较更注重事件的触发，而PWM生成模式则专注于产生持续的周期性波形。</p><h4 id="363-q何为强制输出有啥用"><a class="markdownIt-Anchor" href="#363-q何为强制输出有啥用"></a> 3.6.3. Q：何为强制输出？有啥用？</h4><p>A：强制输出模式（Forced Output Mode）是定时器的一种特殊输出控制模式，主要用于在定时器的某些条件下强制改变输出引脚的状态（例如设置为高或低）。这种模式可以在定时器产生的输出信号之外，强制控制引脚的状态。</p><h5 id="3631-强制输出模式的工作原理"><a class="markdownIt-Anchor" href="#3631-强制输出模式的工作原理"></a> 3.6.3.1. 强制输出模式的工作原理：</h5><p>在强制输出模式下，定时器的输出信号不再完全依赖于定时器计数器和比较寄存器的常规操作（比如在 PWM 或输出比较模式下的信号波形）。你可以通过某些特定的条件或命令直接控制输出引脚的状态。例如，定时器可以在特定时刻将引脚强制设置为高或低状态。</p><h5 id="3632-主要功能"><a class="markdownIt-Anchor" href="#3632-主要功能"></a> 3.6.3.2. 主要功能：</h5><ul><li><strong>强制设置输出引脚的状态</strong>：在某些情况下，强制输出模式可以被用来直接控制输出引脚的状态，而无需依赖于定时器的正常计数和比较过程。</li><li><strong>安全控制和复位功能</strong>：强制输出模式有时用于一些安全或复位操作，比如在硬件故障时通过强制输出信号来重置系统，或在特定条件下确保引脚处于某一状态。</li><li><strong>特定场景下的信号生成</strong>：有时，强制输出模式被用来生成短暂的脉冲或特殊的状态，通常用于外部硬件的控制。</li></ul><h5 id="3633-工作模式"><a class="markdownIt-Anchor" href="#3633-工作模式"></a> 3.6.3.3. 工作模式：</h5><ul><li><strong>定时器强制输出高或低</strong>：当定时器处于强制输出模式时，可以通过强制命令直接控制输出引脚状态，例如强制输出引脚保持高电平或低电平。</li><li><strong>常用的应用</strong>：这种模式常用于一些特殊的信号要求，如在系统发生异常时通过定时器引脚来输出一个特定信号，以触发外部硬件或进行故障诊断。</li></ul><h5 id="3634-例子"><a class="markdownIt-Anchor" href="#3634-例子"></a> 3.6.3.4. 例子：</h5><p>在某些微控制器中，定时器的强制输出模式可以与“输出比较模式”结合使用，当定时器进入强制输出模式时，它会直接设置输出引脚为高或低，而不再受定时器的常规计数和比较值的控制。可以通过特定的触发条件或外部信号来激活强制输出模式，这通常用于控制需要在系统中立即做出响应的应用场景。<strong>（通过软件切换）</strong></p><h5 id="3635-总结"><a class="markdownIt-Anchor" href="#3635-总结"></a> 3.6.3.5. 总结：</h5><p>强制输出模式就是在特定情况下，强制定时器的输出引脚为高或低电平，忽略定时器的常规输出信号，常用于特殊的应用需求，如系统故障处理、硬件复位、特殊信号生成等。</p><h4 id="364-q输入捕获的间接模式"><a class="markdownIt-Anchor" href="#364-q输入捕获的间接模式"></a> 3.6.4. Q：输入捕获的间接模式？</h4><p>A：间接模式较为复杂，捕获事件并不直接与计数器挂钩，而是通过某些条件或外部事件来触，具体来说，这种模式可能涉及定时器的某些附加功能（例如外部触发事件或特定的输入滤波器），这些功能可能会延迟捕获事件的实际记录。</p><h5 id="3641-特点"><a class="markdownIt-Anchor" href="#3641-特点"></a> 3.6.4.1. 特点：</h5><ul><li><strong>间接捕获</strong>：输入信号的变化并不是直接影响计数器，而是需要某些附加的条件或触发事件来保存捕获值。</li><li><strong>较复杂的控制逻辑</strong>：非直接模式<strong>可以结合更多外部事件和触发条件来决定何时捕获信号</strong>，因此适用于更复杂的应用场景。</li><li><strong>滤波和去抖动</strong>：非直接模式可以配合外部触发信号或滤波功能，适用于噪声较大的环境。</li></ul><h5 id="3642-以下是直接与非直接模式的比较"><a class="markdownIt-Anchor" href="#3642-以下是直接与非直接模式的比较"></a> 3.6.4.2. 以下是直接与非直接模式的比较</h5><table><thead><tr><th>特性</th><th>直接模式（Direct Mode）</th><th>非直接模式（Indirect Mode）</th></tr></thead><tbody><tr><td><strong>捕获方式</strong></td><td>信号变化直接触发捕获，捕获值立即存储</td><td>信号变化通过触发事件或附加条件触发捕获</td></tr><tr><td><strong>触发条件</strong></td><td>外部输入信号（上升沿/下降沿）直接触发捕获</td><td>外部事件、触发器或滤波器控制捕获事件的触发</td></tr><tr><td><strong>响应速度</strong></td><td>快速（通常实时捕获）</td><td>相对较慢，可能需要额外条件来触发捕获</td></tr><tr><td><strong>应用场景</strong></td><td>适用于高频信号的实时捕获（如频率测量、脉冲宽度测量）</td><td>适用于需要外部事件触发的场景，如外部信号同步等</td></tr><tr><td><strong>实现复杂度</strong></td><td>简单，通常是硬件层面直接实现</td><td>需要额外的硬件配置和控制（如触发、滤波）</td></tr></tbody></table><h4 id="365-参考"><a class="markdownIt-Anchor" href="#365-参考"></a> 3.6.5. 参考</h4><ul><li>👍👍👍ChatGPT</li><li>👍👍👍<a href="https://news.eeworld.com.cn/mcu/ic565151.html">STM32-一文搞懂通用定时器捕获/比较通道-电子工程世界</a></li></ul>]]></content>
    
    
    <summary type="html">本篇介绍了关于Timer能配置的的各种功能。</summary>
    
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="CubeMX配置功能" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/CubeMX%E9%85%8D%E7%BD%AE%E5%8A%9F%E8%83%BD/"/>
    
    
    <category term="STM32" scheme="https://blog.godmao.top/Tags/STM32/"/>
    
    <category term="CubeMX" scheme="https://blog.godmao.top/Tags/CubeMX/"/>
    
    <category term="嵌入式" scheme="https://blog.godmao.top/Tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="Timer" scheme="https://blog.godmao.top/Tags/Timer/"/>
    
  </entry>
  
  <entry>
    <title>CubeMX配置功能系列：Timer（上）</title>
    <link href="https://blog.godmao.top/posts/16836/"/>
    <id>https://blog.godmao.top/posts/16836/</id>
    <published>2025-02-06T09:58:22.000Z</published>
    <updated>2025-03-09T09:36:26.000Z</updated>
    
    <content type="html"><![CDATA[<details><summary>版权信息</summary><p>:::warning</p><p>本文章为博主原创文章。遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh-hans">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>:::</p></details><hr /><h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#1-%E8%AF%B4%E6%98%8E">1. 说明</a></li><li><a href="#2-%E7%95%8C%E9%9D%A2%E6%80%BB%E8%A7%88">2. 界面总览</a></li><li><a href="#3-lptim%E6%B2%A1%E7%94%A8%E8%BF%87%E7%94%A8%E8%BF%87%E5%90%8E%E8%A1%A5%E5%85%85">3. LPTIM：没用过，用过后补充</a><ul><li><a href="#31-%E4%BB%8B%E7%BB%8D">3.1. 介绍</a></li><li><a href="#32-%E6%94%AF%E6%8C%81%E7%9A%84%E6%A8%A1%E5%BC%8F">3.2. 支持的模式</a></li><li><a href="#33-%E5%8F%82%E8%80%83">3.3. 参考</a></li></ul></li><li><a href="#4-rtc%E4%B9%9F%E4%B8%8D%E5%92%8B%E7%94%A8%E7%94%A8%E6%97%B6%E8%A1%A5%E5%85%85">4. RTC：也不咋用，用时补充</a><ul><li><a href="#41-%E4%BB%80%E4%B9%88%E6%98%AFrtc">4.1. 什么是RTC</a></li><li><a href="#42-%E5%8A%9F%E8%83%BD%E7%AE%80%E4%BB%8B">4.2. 功能简介</a></li><li><a href="#43-%E5%8F%82%E8%80%83">4.3. 参考</a></li></ul></li></ul><h2 id="1-说明"><a class="markdownIt-Anchor" href="#1-说明"></a> 1. 说明</h2><p>本文以STM32G4系列为例。供自己学习与记录且只做简单介绍。有一定基础的朋友可参考。</p><hr /><h2 id="2-界面总览"><a class="markdownIt-Anchor" href="#2-界面总览"></a> 2. 界面总览</h2><p>打开Timer的配置界面如图：<br /><img src="Snipaste_2025-02-06_18-21-03.png" alt="" /></p><h2 id="3-lptim没用过用过后补充"><a class="markdownIt-Anchor" href="#3-lptim没用过用过后补充"></a> 3. LPTIM：没用过，用过后补充</h2><h3 id="31-介绍"><a class="markdownIt-Anchor" href="#31-介绍"></a> 3.1. 介绍</h3><p>LPTIM 是一个 16 位定时器，顾名思义他就是可以实现低功耗应用的一个特殊定时器。由于时钟源的多样性，LPTIM 能够在除待机模式以外的所有电源模式下保持运行。 即使没有内部时钟源， LPTIM 也能运行，鉴于这一点，可将其用作“脉冲计数器”，这种脉冲计数器在某些应用中十分有用。此外， LPTIM还能将系统从低功耗模式唤醒，因此非常适合实现“超时功能”，而且功耗极低。</p><p>LPTIM 引入了一个灵活的时钟方案，该方案能够提供所需的功能和性能，同时还能最大程度地降低功耗。</p><p>LPTIM时基单元包含一个16位自动重载计数器ARR，一个16位的递增计数器CNT，一个3位可编程预分频器可以采用8种分频系数（1、2、4、8、16、32、64、128）， 预分频器时钟源有多种可选，有内部时钟源： LSE、 LSI、 HSI 或 APB 时钟、外部时钟ULPTIM输入的外部时钟源（在没有 LP 振荡器运行的情况下工作，由脉冲计数器应用使用）。</p><h3 id="32-支持的模式"><a class="markdownIt-Anchor" href="#32-支持的模式"></a> 3.2. 支持的模式</h3><p><img src="Snipaste_2025-02-06_18-22-29.png" alt="" /><br /><img src="Snipaste_2025-02-06_18-23-44.png" alt="" /></p><ul><li>计数器模式：计数器可用于计算来自 Input1 的外部事件或用于计算内部时钟周期</li><li>单次模式：在此模式下，当满足匹配条件时，输出可以切换高低电平（如果输出极性配置为高，则为低电平至高电平变化，反之亦然）</li><li>编码器模式<br />此外还有</li><li>单脉冲模式</li><li>PWM 模式</li><li>超时模式：有效的边沿触发输入可复位定时器。第一个触发事件将启动计时器，任何连续触发事件将重置计数器并重新开始。</li></ul><h3 id="33-参考"><a class="markdownIt-Anchor" href="#33-参考"></a> 3.3. 参考</h3><p><a href="https://blog.csdn.net/qq_42965739/article/details/113532039">【玩转STM32】：低功耗定时器LPTIM应用_stm32 lptim-CSDN博客</a><br /><a href="https://doc.embedfire.com/mcu/stm32/h743prov/hal/zh/latest/book/LPTIM.html">32. LPTIM—低功耗定时器 — [野火]STM32 HAL库开发实战指南——基于H743_Pro_V 文档</a></p><h2 id="4-rtc也不咋用用时补充"><a class="markdownIt-Anchor" href="#4-rtc也不咋用用时补充"></a> 4. RTC：也不咋用，用时补充</h2><h3 id="41-什么是rtc"><a class="markdownIt-Anchor" href="#41-什么是rtc"></a> 4.1. 什么是RTC</h3><p><strong>RTC (Real Time Clock)</strong>：实时时钟</p><p><strong>RTC是个独立的定时器</strong>。RTC模块拥有一个连续计数的计数器，在相应的软件配置下，可以提供时钟日历的功能。修改计数器的值可以重新设置当前时间和日期 RTC还包含用于管理低功耗模式的自动唤醒单元。</p><p>在断电情况下 RTC仍可以独立运行 只要芯片的备用电源一直供电,RTC上的时间会一直走。</p><p>RTC实质是一个掉电后还继续运行的定时器,从定时器的角度来看,相对于通用定时器TIM外设,它的功能十分简单,只有计时功能(也可以触发中断)。但其高级指出也就在于掉电之后还可以正常运行。</p><p>两个 32 位寄存器包含二进码十进数格式 (BCD) 的秒、分钟、小时（ 12 或 24 小时制）、星期几、日期、月份和年份。此外，还可提供二进制格式的亚秒值。系统可以自动将月份的天数补偿为 28、29（闰年）、30 和 31 天。</p><p>上电复位后，所有RTC寄存器都会受到保护，以防止可能的非正常写访问。</p><p>无论器件状态如何（运行模式、低功耗模式或处于复位状态），只要电源电压保持在工作范围内，RTC使不会停止工作。</p><h3 id="42-功能简介"><a class="markdownIt-Anchor" href="#42-功能简介"></a> 4.2. 功能简介</h3><p><img src="Snipaste_2025-02-06_18-46-47.png" alt="" /></p><ul><li><strong>激活时钟源</strong>：<strong>一般选用LSE</strong>，RTC设备因为其独特的运行方式（即掉电依旧运行）使用HSE分频时钟或者LSI的时候,在主电源VDD掉电的情况下,这两个时钟来源都会受到影响，资源消耗太大，小小的纽扣电池根本吃不消。没法保证RTC正常工作.所以RTC一般都时钟低速外部时钟LSE</li><li><strong>使能RTC日历</strong></li><li><strong>可编程的闹钟A/B</strong>，如果设置了闹钟A/B的时间，则闹钟A/B设定时间会和当前日历时间对比，如果时间相等，会产生ALRA/BF事件</li><li><strong>周期唤醒</strong>：可以使用RTC内部一个16位唤醒自动重载寄存器来实现，周期唤醒的时钟信号可以来自于更新日历的1Hz（ck_spre）信号，也可以使用RTC时钟的2/4/8/16分频后的时钟，设置该自动重载寄存器的值，<strong>根据时钟频率向上计数，当计数溢出时发生周期唤醒事件</strong></li><li><strong>时间戳</strong></li><li><strong>Tamper</strong>：入侵检测</li><li><strong>时钟校准</strong></li><li><strong>参考时钟检测？？？</strong></li></ul><h3 id="43-a参考"><a class="markdownIt-Anchor" href="#43-a参考"></a> 4.3. </a>参考</h3><p><a href="https://community.st.com/t5/stm32-mcus/how-to-calibrate-the-stm32-s-real-time-clock-rtc/ta-p/744958">How to calibrate the STM32’s real-time clock (RTC) - STMicroelectronics Community</a><br /><a href="https://blog.csdn.net/lc_guo/article/details/135225854">STM32CubeMX教程10 RTC 实时时钟 - 周期唤醒、闹钟A/B事件和备份寄存器_stm32cubemx rtc-CSDN博客</a><br /><a href="https://blog.csdn.net/as480133937/article/details/105026033">【STM32】RTC实时时钟，步骤超细详解，一文看懂RTC_rtc模块-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">本篇介绍了关于Timer能配置的的各种功能。</summary>
    
    
    
    <category term="嵌入式" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="CubeMX配置功能" scheme="https://blog.godmao.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/CubeMX%E9%85%8D%E7%BD%AE%E5%8A%9F%E8%83%BD/"/>
    
    
    <category term="STM32" scheme="https://blog.godmao.top/Tags/STM32/"/>
    
    <category term="CubeMX" scheme="https://blog.godmao.top/Tags/CubeMX/"/>
    
    <category term="嵌入式" scheme="https://blog.godmao.top/Tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="Timer" scheme="https://blog.godmao.top/Tags/Timer/"/>
    
  </entry>
  
  <entry>
    <title>相机控色</title>
    <link href="https://blog.godmao.top/posts/50403/"/>
    <id>https://blog.godmao.top/posts/50403/</id>
    <published>2025-01-21T13:46:45.000Z</published>
    <updated>2025-03-09T06:33:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>教程及截图来自b站： <a href="https://www.bilibili.com/video/BV1DQiyYkEJC/">https://www.bilibili.com/video/BV1DQiyYkEJC/</a></p><hr /><h2 id="色温k"><a class="markdownIt-Anchor" href="#色温k"></a> 色温（K）</h2><ul><li>色温高：呈现暖色，色温低：呈现冷色（与环境色温是反的）</li><li><img src="Snipaste_2025-01-21_22-20-26.png" alt="" /></li><li><code>偏色</code>：拍摄时由于光线干扰，色温等因素影响，使得物体本身色彩受到干扰<ul><li>矫正：将相机色温数值调到与环境色温数值相同</li></ul></li><li>一些推荐色温 #拍摄技巧<ul><li>冰天雪地、蓝调、夜晚、天空：冷色调（under 5000k）</li><li>冬日暖阳、温暖、黄沙：暖色调（up 6000k）</li></ul></li></ul><h2 id="白平衡wb"><a class="markdownIt-Anchor" href="#白平衡wb"></a> 白平衡（WB）</h2><ul><li>校正环境偏色。<img src="Snipaste_2025-01-21_22-31-07.png" alt="" /></li><li><strong>一般使用白平衡自动或者直接自己校正色温</strong></li><li>感觉平常可以直接白平衡自动，后期调啊。。</li></ul><h2 id="根据主导色确定画面色温"><a class="markdownIt-Anchor" href="#根据主导色确定画面色温"></a> 根据主导色确定画面色温</h2><ul><li>如果主导色偏暖，可以往暖色调色温</li><li>如果主导色偏冷，可以往冷色调色温，使画面更具<strong>氛围</strong></li><li>注意：照片也<strong>不一定要偏冷和偏暖</strong>，偏色用于营造氛围，有些作品需要保证不要偏色，还原真实色彩</li></ul><h2 id="白平衡偏移"><a class="markdownIt-Anchor" href="#白平衡偏移"></a> 白平衡偏移</h2><p><img src="Snipaste_2025-01-21_23-10-03.png" alt="" /></p><p><img src="Snipaste_2025-01-21_23-11-23.png" alt="" /></p><ul><li>两大作用：<ul><li>画面氛围渲染</li><li>控制颜色偏移的程度：解决调整色温导致一些细节的色彩不对，例如色温过高导致人像泛红，调整白平衡偏移往红色<strong>反方向调</strong>。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">本篇介绍了相机控色相关知识。</summary>
    
    
    
    <category term="摄影学习" scheme="https://blog.godmao.top/categories/%E6%91%84%E5%BD%B1%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="摄影基础" scheme="https://blog.godmao.top/Tags/%E6%91%84%E5%BD%B1%E5%9F%BA%E7%A1%80/"/>
    
    <category term="学习笔记" scheme="https://blog.godmao.top/Tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="相机控色" scheme="https://blog.godmao.top/Tags/%E7%9B%B8%E6%9C%BA%E6%8E%A7%E8%89%B2/"/>
    
    <category term="白平衡" scheme="https://blog.godmao.top/Tags/%E7%99%BD%E5%B9%B3%E8%A1%A1/"/>
    
  </entry>
  
</feed>
